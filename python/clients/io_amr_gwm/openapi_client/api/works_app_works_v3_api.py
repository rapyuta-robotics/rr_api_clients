# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator

from typing import List, Optional, Union

from openapi_client.models.paginated_v3_work_list import PaginatedV3WorkList
from openapi_client.models.patched_v3_work_external_update_request import PatchedV3WorkExternalUpdateRequest
from openapi_client.models.patched_v3_work_internal_update_request import PatchedV3WorkInternalUpdateRequest
from openapi_client.models.v1_containers_create_descriptor_parameter_inner import V1ContainersCreateDescriptorParameterInner
from openapi_client.models.v3_activate_work import V3ActivateWork
from openapi_client.models.v3_activate_work_request import V3ActivateWorkRequest
from openapi_client.models.v3_work import V3Work
from openapi_client.models.v3_work_external_update import V3WorkExternalUpdate
from openapi_client.models.v3_work_internal_update import V3WorkInternalUpdate
from openapi_client.models.v3_work_internal_update_request import V3WorkInternalUpdateRequest
from openapi_client.models.v3_work_request import V3WorkRequest

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorksAppWorksV3Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v3_works_activate_create(self, v3_activate_work_request : Optional[V3ActivateWorkRequest] = None, **kwargs) -> V3ActivateWork:  # noqa: E501
        """Activate work  # noqa: E501

        Activate work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_activate_create(v3_activate_work_request, async_req=True)
        >>> result = thread.get()

        :param v3_activate_work_request:
        :type v3_activate_work_request: V3ActivateWorkRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3ActivateWork
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_activate_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_activate_create_with_http_info(v3_activate_work_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_activate_create_with_http_info(self, v3_activate_work_request : Optional[V3ActivateWorkRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Activate work  # noqa: E501

        Activate work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_activate_create_with_http_info(v3_activate_work_request, async_req=True)
        >>> result = thread.get()

        :param v3_activate_work_request:
        :type v3_activate_work_request: V3ActivateWorkRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3ActivateWork, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'v3_activate_work_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_activate_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['v3_activate_work_request'] is not None:
            _body_params = _params['v3_activate_work_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3ActivateWork",
        }

        return self.api_client.call_api(
            '/v3/works/activate', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_bulk_internal_update(self, v3_work_internal_update_request : conlist(V3WorkInternalUpdateRequest), **kwargs) -> V3Work:  # noqa: E501
        """Bulk Internal Update Work  # noqa: E501

        Bulk Internal Update Work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_bulk_internal_update(v3_work_internal_update_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_internal_update_request: (required)
        :type v3_work_internal_update_request: List[V3WorkInternalUpdateRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3Work
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_bulk_internal_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_bulk_internal_update_with_http_info(v3_work_internal_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_bulk_internal_update_with_http_info(self, v3_work_internal_update_request : conlist(V3WorkInternalUpdateRequest), **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk Internal Update Work  # noqa: E501

        Bulk Internal Update Work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_bulk_internal_update_with_http_info(v3_work_internal_update_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_internal_update_request: (required)
        :type v3_work_internal_update_request: List[V3WorkInternalUpdateRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3Work, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'v3_work_internal_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_bulk_internal_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['v3_work_internal_update_request'] is not None:
            _body_params = _params['v3_work_internal_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3Work",
        }

        return self.api_client.call_api(
            '/v3/works/internal_update', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_clear_create(self, v3_activate_work_request : Optional[V3ActivateWorkRequest] = None, **kwargs) -> V3ActivateWork:  # noqa: E501
        """Delete works by ids  # noqa: E501

        Delete works by ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_clear_create(v3_activate_work_request, async_req=True)
        >>> result = thread.get()

        :param v3_activate_work_request:
        :type v3_activate_work_request: V3ActivateWorkRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3ActivateWork
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_clear_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_clear_create_with_http_info(v3_activate_work_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_clear_create_with_http_info(self, v3_activate_work_request : Optional[V3ActivateWorkRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Delete works by ids  # noqa: E501

        Delete works by ids  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_clear_create_with_http_info(v3_activate_work_request, async_req=True)
        >>> result = thread.get()

        :param v3_activate_work_request:
        :type v3_activate_work_request: V3ActivateWorkRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3ActivateWork, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'v3_activate_work_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_clear_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['v3_activate_work_request'] is not None:
            _body_params = _params['v3_activate_work_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3ActivateWork",
        }

        return self.api_client.call_api(
            '/v3/works/clear', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_count_retrieve(self, activated_at_after : Optional[datetime] = None, activated_at_before : Optional[datetime] = None, assigned_agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, batch : Optional[conlist(StrictStr)] = None, batch_contains : Optional[StrictStr] = None, created_at_after : Optional[datetime] = None, created_at_before : Optional[datetime] = None, cut_off_time_after : Optional[datetime] = None, cut_off_time_before : Optional[datetime] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[conlist(StrictStr)] = None, name_contains : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, priority : Optional[conlist(StrictInt)] = None, status : Annotated[Optional[conlist(StrictStr)], Field(description="Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed")] = None, task_agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot")] = None, workflow : Optional[conlist(StrictStr)] = None, **kwargs) -> int:  # noqa: E501
        """v3_works_count_retrieve  # noqa: E501

        Manage Works  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_count_retrieve(activated_at_after, activated_at_before, assigned_agent, batch, batch_contains, created_at_after, created_at_before, cut_off_time_after, cut_off_time_before, id, name, name_contains, ordering, priority, status, task_agent, type, workflow, async_req=True)
        >>> result = thread.get()

        :param activated_at_after:
        :type activated_at_after: datetime
        :param activated_at_before:
        :type activated_at_before: datetime
        :param assigned_agent:
        :type assigned_agent: List[V1ContainersCreateDescriptorParameterInner]
        :param batch:
        :type batch: List[str]
        :param batch_contains:
        :type batch_contains: str
        :param created_at_after:
        :type created_at_after: datetime
        :param created_at_before:
        :type created_at_before: datetime
        :param cut_off_time_after:
        :type cut_off_time_after: datetime
        :param cut_off_time_before:
        :type cut_off_time_before: datetime
        :param id:
        :type id: List[int]
        :param name:
        :type name: List[str]
        :param name_contains:
        :type name_contains: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param priority:
        :type priority: List[int]
        :param status: Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed
        :type status: List[str]
        :param task_agent:
        :type task_agent: List[V1ContainersCreateDescriptorParameterInner]
        :param type: Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot
        :type type: List[str]
        :param workflow:
        :type workflow: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_count_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_count_retrieve_with_http_info(activated_at_after, activated_at_before, assigned_agent, batch, batch_contains, created_at_after, created_at_before, cut_off_time_after, cut_off_time_before, id, name, name_contains, ordering, priority, status, task_agent, type, workflow, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_count_retrieve_with_http_info(self, activated_at_after : Optional[datetime] = None, activated_at_before : Optional[datetime] = None, assigned_agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, batch : Optional[conlist(StrictStr)] = None, batch_contains : Optional[StrictStr] = None, created_at_after : Optional[datetime] = None, created_at_before : Optional[datetime] = None, cut_off_time_after : Optional[datetime] = None, cut_off_time_before : Optional[datetime] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[conlist(StrictStr)] = None, name_contains : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, priority : Optional[conlist(StrictInt)] = None, status : Annotated[Optional[conlist(StrictStr)], Field(description="Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed")] = None, task_agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot")] = None, workflow : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v3_works_count_retrieve  # noqa: E501

        Manage Works  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_count_retrieve_with_http_info(activated_at_after, activated_at_before, assigned_agent, batch, batch_contains, created_at_after, created_at_before, cut_off_time_after, cut_off_time_before, id, name, name_contains, ordering, priority, status, task_agent, type, workflow, async_req=True)
        >>> result = thread.get()

        :param activated_at_after:
        :type activated_at_after: datetime
        :param activated_at_before:
        :type activated_at_before: datetime
        :param assigned_agent:
        :type assigned_agent: List[V1ContainersCreateDescriptorParameterInner]
        :param batch:
        :type batch: List[str]
        :param batch_contains:
        :type batch_contains: str
        :param created_at_after:
        :type created_at_after: datetime
        :param created_at_before:
        :type created_at_before: datetime
        :param cut_off_time_after:
        :type cut_off_time_after: datetime
        :param cut_off_time_before:
        :type cut_off_time_before: datetime
        :param id:
        :type id: List[int]
        :param name:
        :type name: List[str]
        :param name_contains:
        :type name_contains: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param priority:
        :type priority: List[int]
        :param status: Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed
        :type status: List[str]
        :param task_agent:
        :type task_agent: List[V1ContainersCreateDescriptorParameterInner]
        :param type: Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot
        :type type: List[str]
        :param workflow:
        :type workflow: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'activated_at_after',
            'activated_at_before',
            'assigned_agent',
            'batch',
            'batch_contains',
            'created_at_after',
            'created_at_before',
            'cut_off_time_after',
            'cut_off_time_before',
            'id',
            'name',
            'name_contains',
            'ordering',
            'priority',
            'status',
            'task_agent',
            'type',
            'workflow'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_count_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('activated_at_after') is not None:  # noqa: E501
            if isinstance(_params['activated_at_after'], datetime):
                _query_params.append(('activated_at_after', _params['activated_at_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('activated_at_after', _params['activated_at_after']))

        if _params.get('activated_at_before') is not None:  # noqa: E501
            if isinstance(_params['activated_at_before'], datetime):
                _query_params.append(('activated_at_before', _params['activated_at_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('activated_at_before', _params['activated_at_before']))

        if _params.get('assigned_agent') is not None:  # noqa: E501
            _query_params.append(('assigned_agent', _params['assigned_agent']))
            _collection_formats['assigned_agent'] = 'multi'

        if _params.get('batch') is not None:  # noqa: E501
            _query_params.append(('batch', _params['batch']))
            _collection_formats['batch'] = 'multi'

        if _params.get('batch_contains') is not None:  # noqa: E501
            _query_params.append(('batch_contains', _params['batch_contains']))

        if _params.get('created_at_after') is not None:  # noqa: E501
            if isinstance(_params['created_at_after'], datetime):
                _query_params.append(('created_at_after', _params['created_at_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_after', _params['created_at_after']))

        if _params.get('created_at_before') is not None:  # noqa: E501
            if isinstance(_params['created_at_before'], datetime):
                _query_params.append(('created_at_before', _params['created_at_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_before', _params['created_at_before']))

        if _params.get('cut_off_time_after') is not None:  # noqa: E501
            if isinstance(_params['cut_off_time_after'], datetime):
                _query_params.append(('cut_off_time_after', _params['cut_off_time_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('cut_off_time_after', _params['cut_off_time_after']))

        if _params.get('cut_off_time_before') is not None:  # noqa: E501
            if isinstance(_params['cut_off_time_before'], datetime):
                _query_params.append(('cut_off_time_before', _params['cut_off_time_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('cut_off_time_before', _params['cut_off_time_before']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))
            _collection_formats['name'] = 'multi'

        if _params.get('name_contains') is not None:  # noqa: E501
            _query_params.append(('name_contains', _params['name_contains']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('priority') is not None:  # noqa: E501
            _query_params.append(('priority', _params['priority']))
            _collection_formats['priority'] = 'multi'

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))
            _collection_formats['status'] = 'multi'

        if _params.get('task_agent') is not None:  # noqa: E501
            _query_params.append(('task_agent', _params['task_agent']))
            _collection_formats['task_agent'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        if _params.get('workflow') is not None:  # noqa: E501
            _query_params.append(('workflow', _params['workflow']))
            _collection_formats['workflow'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "int",
        }

        return self.api_client.call_api(
            '/v3/works/count', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_create(self, v3_work_request : conlist(V3WorkRequest), **kwargs) -> List[V3Work]:  # noqa: E501
        """Create A Work  # noqa: E501

        Create A Work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_create(v3_work_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_request: (required)
        :type v3_work_request: List[V3WorkRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[V3Work]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_create_with_http_info(v3_work_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_create_with_http_info(self, v3_work_request : conlist(V3WorkRequest), **kwargs) -> ApiResponse:  # noqa: E501
        """Create A Work  # noqa: E501

        Create A Work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_create_with_http_info(v3_work_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_request: (required)
        :type v3_work_request: List[V3WorkRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[V3Work], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'v3_work_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['v3_work_request'] is not None:
            _body_params = _params['v3_work_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "List[V3Work]",
        }

        return self.api_client.call_api(
            '/v3/works', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_destroy(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], **kwargs) -> None:  # noqa: E501
        """Delete work in terminal or on_hold state  # noqa: E501

        Delete work in terminal or on_hold state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_destroy(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_destroy_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_destroy_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete work in terminal or on_hold state  # noqa: E501

        Delete work in terminal or on_hold state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v3/works/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_internal_update_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], patched_v3_work_internal_update_request : Optional[PatchedV3WorkInternalUpdateRequest] = None, **kwargs) -> V3WorkInternalUpdate:  # noqa: E501
        """Internal Update Work  # noqa: E501

        Do not use this, this is for internal updates only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_internal_update_partial_update(id, patched_v3_work_internal_update_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param patched_v3_work_internal_update_request:
        :type patched_v3_work_internal_update_request: PatchedV3WorkInternalUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3WorkInternalUpdate
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_internal_update_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_internal_update_partial_update_with_http_info(id, patched_v3_work_internal_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_internal_update_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], patched_v3_work_internal_update_request : Optional[PatchedV3WorkInternalUpdateRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Internal Update Work  # noqa: E501

        Do not use this, this is for internal updates only  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_internal_update_partial_update_with_http_info(id, patched_v3_work_internal_update_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param patched_v3_work_internal_update_request:
        :type patched_v3_work_internal_update_request: PatchedV3WorkInternalUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3WorkInternalUpdate, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'patched_v3_work_internal_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_internal_update_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_v3_work_internal_update_request'] is not None:
            _body_params = _params['patched_v3_work_internal_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3WorkInternalUpdate",
        }

        return self.api_client.call_api(
            '/v3/works/{id}/internal_update', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_list(self, activated_at_after : Annotated[Optional[datetime], Field(description="filter works activated after given timestamp")] = None, activated_at_before : Annotated[Optional[datetime], Field(description="filter works activated before given timestamp")] = None, application_data : Annotated[Optional[StrictStr], Field(description="filter by application_data query")] = None, assigned_agent : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter by work assigned to any agents with ids")] = None, batch : Optional[conlist(StrictStr)] = None, batch_contains : Optional[StrictStr] = None, created_at_after : Annotated[Optional[datetime], Field(description="filter works created after given timestamp")] = None, created_at_before : Annotated[Optional[datetime], Field(description="filter works created before given timestamp")] = None, cut_off_time_after : Annotated[Optional[datetime], Field(description="filter works cut off time after given timestamp")] = None, cut_off_time_before : Optional[datetime] = None, id : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter works by ids")] = None, meta_data : Annotated[Optional[StrictStr], Field(description="filter by meta_data query")] = None, name : Annotated[Optional[conlist(StrictStr)], Field(description="User provided names eg: `mywarehouse_move_2021-05-11T12:05:27Z`")] = None, name_contains : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number, this is only applicable if page_size param is passed")] = None, page_size : Optional[StrictInt] = None, priority : Optional[conlist(StrictInt)] = None, status : Annotated[Optional[conlist(StrictStr)], Field(description="filter by work status")] = None, task_agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="filter by work type")] = None, with_fragment_count : Annotated[Optional[StrictBool], Field(description="Include fragment counts in payload works")] = None, workflow : Optional[conlist(StrictStr)] = None, **kwargs) -> PaginatedV3WorkList:  # noqa: E501
        """List Works  # noqa: E501

        List Works  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_list(activated_at_after, activated_at_before, application_data, assigned_agent, batch, batch_contains, created_at_after, created_at_before, cut_off_time_after, cut_off_time_before, id, meta_data, name, name_contains, ordering, page, page_size, priority, status, task_agent, type, with_fragment_count, workflow, async_req=True)
        >>> result = thread.get()

        :param activated_at_after: filter works activated after given timestamp
        :type activated_at_after: datetime
        :param activated_at_before: filter works activated before given timestamp
        :type activated_at_before: datetime
        :param application_data: filter by application_data query
        :type application_data: str
        :param assigned_agent: filter by work assigned to any agents with ids
        :type assigned_agent: List[float]
        :param batch:
        :type batch: List[str]
        :param batch_contains:
        :type batch_contains: str
        :param created_at_after: filter works created after given timestamp
        :type created_at_after: datetime
        :param created_at_before: filter works created before given timestamp
        :type created_at_before: datetime
        :param cut_off_time_after: filter works cut off time after given timestamp
        :type cut_off_time_after: datetime
        :param cut_off_time_before:
        :type cut_off_time_before: datetime
        :param id: filter works by ids
        :type id: List[float]
        :param meta_data: filter by meta_data query
        :type meta_data: str
        :param name: User provided names eg: `mywarehouse_move_2021-05-11T12:05:27Z`
        :type name: List[str]
        :param name_contains:
        :type name_contains: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: Page number, this is only applicable if page_size param is passed
        :type page: int
        :param page_size:
        :type page_size: int
        :param priority:
        :type priority: List[int]
        :param status: filter by work status
        :type status: List[str]
        :param task_agent:
        :type task_agent: List[V1ContainersCreateDescriptorParameterInner]
        :param type: filter by work type
        :type type: List[str]
        :param with_fragment_count: Include fragment counts in payload works
        :type with_fragment_count: bool
        :param workflow:
        :type workflow: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedV3WorkList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_list_with_http_info(activated_at_after, activated_at_before, application_data, assigned_agent, batch, batch_contains, created_at_after, created_at_before, cut_off_time_after, cut_off_time_before, id, meta_data, name, name_contains, ordering, page, page_size, priority, status, task_agent, type, with_fragment_count, workflow, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_list_with_http_info(self, activated_at_after : Annotated[Optional[datetime], Field(description="filter works activated after given timestamp")] = None, activated_at_before : Annotated[Optional[datetime], Field(description="filter works activated before given timestamp")] = None, application_data : Annotated[Optional[StrictStr], Field(description="filter by application_data query")] = None, assigned_agent : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter by work assigned to any agents with ids")] = None, batch : Optional[conlist(StrictStr)] = None, batch_contains : Optional[StrictStr] = None, created_at_after : Annotated[Optional[datetime], Field(description="filter works created after given timestamp")] = None, created_at_before : Annotated[Optional[datetime], Field(description="filter works created before given timestamp")] = None, cut_off_time_after : Annotated[Optional[datetime], Field(description="filter works cut off time after given timestamp")] = None, cut_off_time_before : Optional[datetime] = None, id : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter works by ids")] = None, meta_data : Annotated[Optional[StrictStr], Field(description="filter by meta_data query")] = None, name : Annotated[Optional[conlist(StrictStr)], Field(description="User provided names eg: `mywarehouse_move_2021-05-11T12:05:27Z`")] = None, name_contains : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="Page number, this is only applicable if page_size param is passed")] = None, page_size : Optional[StrictInt] = None, priority : Optional[conlist(StrictInt)] = None, status : Annotated[Optional[conlist(StrictStr)], Field(description="filter by work status")] = None, task_agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="filter by work type")] = None, with_fragment_count : Annotated[Optional[StrictBool], Field(description="Include fragment counts in payload works")] = None, workflow : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Works  # noqa: E501

        List Works  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_list_with_http_info(activated_at_after, activated_at_before, application_data, assigned_agent, batch, batch_contains, created_at_after, created_at_before, cut_off_time_after, cut_off_time_before, id, meta_data, name, name_contains, ordering, page, page_size, priority, status, task_agent, type, with_fragment_count, workflow, async_req=True)
        >>> result = thread.get()

        :param activated_at_after: filter works activated after given timestamp
        :type activated_at_after: datetime
        :param activated_at_before: filter works activated before given timestamp
        :type activated_at_before: datetime
        :param application_data: filter by application_data query
        :type application_data: str
        :param assigned_agent: filter by work assigned to any agents with ids
        :type assigned_agent: List[float]
        :param batch:
        :type batch: List[str]
        :param batch_contains:
        :type batch_contains: str
        :param created_at_after: filter works created after given timestamp
        :type created_at_after: datetime
        :param created_at_before: filter works created before given timestamp
        :type created_at_before: datetime
        :param cut_off_time_after: filter works cut off time after given timestamp
        :type cut_off_time_after: datetime
        :param cut_off_time_before:
        :type cut_off_time_before: datetime
        :param id: filter works by ids
        :type id: List[float]
        :param meta_data: filter by meta_data query
        :type meta_data: str
        :param name: User provided names eg: `mywarehouse_move_2021-05-11T12:05:27Z`
        :type name: List[str]
        :param name_contains:
        :type name_contains: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: Page number, this is only applicable if page_size param is passed
        :type page: int
        :param page_size:
        :type page_size: int
        :param priority:
        :type priority: List[int]
        :param status: filter by work status
        :type status: List[str]
        :param task_agent:
        :type task_agent: List[V1ContainersCreateDescriptorParameterInner]
        :param type: filter by work type
        :type type: List[str]
        :param with_fragment_count: Include fragment counts in payload works
        :type with_fragment_count: bool
        :param workflow:
        :type workflow: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedV3WorkList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'activated_at_after',
            'activated_at_before',
            'application_data',
            'assigned_agent',
            'batch',
            'batch_contains',
            'created_at_after',
            'created_at_before',
            'cut_off_time_after',
            'cut_off_time_before',
            'id',
            'meta_data',
            'name',
            'name_contains',
            'ordering',
            'page',
            'page_size',
            'priority',
            'status',
            'task_agent',
            'type',
            'with_fragment_count',
            'workflow'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('activated_at_after') is not None:  # noqa: E501
            if isinstance(_params['activated_at_after'], datetime):
                _query_params.append(('activated_at_after', _params['activated_at_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('activated_at_after', _params['activated_at_after']))

        if _params.get('activated_at_before') is not None:  # noqa: E501
            if isinstance(_params['activated_at_before'], datetime):
                _query_params.append(('activated_at_before', _params['activated_at_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('activated_at_before', _params['activated_at_before']))

        if _params.get('application_data') is not None:  # noqa: E501
            _query_params.append(('application_data', _params['application_data']))

        if _params.get('assigned_agent') is not None:  # noqa: E501
            _query_params.append(('assigned_agent', _params['assigned_agent']))
            _collection_formats['assigned_agent'] = 'multi'

        if _params.get('batch') is not None:  # noqa: E501
            _query_params.append(('batch', _params['batch']))
            _collection_formats['batch'] = 'multi'

        if _params.get('batch_contains') is not None:  # noqa: E501
            _query_params.append(('batch_contains', _params['batch_contains']))

        if _params.get('created_at_after') is not None:  # noqa: E501
            if isinstance(_params['created_at_after'], datetime):
                _query_params.append(('created_at_after', _params['created_at_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_after', _params['created_at_after']))

        if _params.get('created_at_before') is not None:  # noqa: E501
            if isinstance(_params['created_at_before'], datetime):
                _query_params.append(('created_at_before', _params['created_at_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('created_at_before', _params['created_at_before']))

        if _params.get('cut_off_time_after') is not None:  # noqa: E501
            if isinstance(_params['cut_off_time_after'], datetime):
                _query_params.append(('cut_off_time_after', _params['cut_off_time_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('cut_off_time_after', _params['cut_off_time_after']))

        if _params.get('cut_off_time_before') is not None:  # noqa: E501
            if isinstance(_params['cut_off_time_before'], datetime):
                _query_params.append(('cut_off_time_before', _params['cut_off_time_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('cut_off_time_before', _params['cut_off_time_before']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('meta_data') is not None:  # noqa: E501
            _query_params.append(('meta_data', _params['meta_data']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))
            _collection_formats['name'] = 'multi'

        if _params.get('name_contains') is not None:  # noqa: E501
            _query_params.append(('name_contains', _params['name_contains']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('priority') is not None:  # noqa: E501
            _query_params.append(('priority', _params['priority']))
            _collection_formats['priority'] = 'multi'

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))
            _collection_formats['status'] = 'multi'

        if _params.get('task_agent') is not None:  # noqa: E501
            _query_params.append(('task_agent', _params['task_agent']))
            _collection_formats['task_agent'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        if _params.get('with_fragment_count') is not None:  # noqa: E501
            _query_params.append(('with_fragment_count', _params['with_fragment_count']))

        if _params.get('workflow') is not None:  # noqa: E501
            _query_params.append(('workflow', _params['workflow']))
            _collection_formats['workflow'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedV3WorkList",
        }

        return self.api_client.call_api(
            '/v3/works', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], patched_v3_work_external_update_request : Optional[PatchedV3WorkExternalUpdateRequest] = None, **kwargs) -> V3WorkExternalUpdate:  # noqa: E501
        """Partially Update Work  # noqa: E501

        Partially Update Work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_partial_update(id, patched_v3_work_external_update_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param patched_v3_work_external_update_request:
        :type patched_v3_work_external_update_request: PatchedV3WorkExternalUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3WorkExternalUpdate
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_partial_update_with_http_info(id, patched_v3_work_external_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], patched_v3_work_external_update_request : Optional[PatchedV3WorkExternalUpdateRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Partially Update Work  # noqa: E501

        Partially Update Work  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_partial_update_with_http_info(id, patched_v3_work_external_update_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param patched_v3_work_external_update_request:
        :type patched_v3_work_external_update_request: PatchedV3WorkExternalUpdateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3WorkExternalUpdate, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'patched_v3_work_external_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_v3_work_external_update_request'] is not None:
            _body_params = _params['patched_v3_work_external_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3WorkExternalUpdate",
        }

        return self.api_client.call_api(
            '/v3/works/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_retrieve(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], **kwargs) -> V3Work:  # noqa: E501
        """Get A Work information  # noqa: E501

        Get A Work information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3Work
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_retrieve_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_retrieve_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work base.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get A Work information  # noqa: E501

        Get A Work information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work base. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3Work, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3Work",
        }

        return self.api_client.call_api(
            '/v3/works/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_works_summary_retrieve(self, end_date : Optional[datetime] = None, group_by : Optional[StrictStr] = None, interval : Annotated[Optional[StrictStr], Field(description="* `daily` - daily * `weekly` - weekly * `monthly` - monthly * `annually` - annually")] = None, start_date : Optional[datetime] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> V3Work:  # noqa: E501
        """Get Work Summary  # noqa: E501

        Get Work Summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_summary_retrieve(end_date, group_by, interval, start_date, type, workflow, async_req=True)
        >>> result = thread.get()

        :param end_date:
        :type end_date: datetime
        :param group_by:
        :type group_by: str
        :param interval: * `daily` - daily * `weekly` - weekly * `monthly` - monthly * `annually` - annually
        :type interval: str
        :param start_date:
        :type start_date: datetime
        :param type: Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot
        :type type: List[str]
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3Work
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_works_summary_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_works_summary_retrieve_with_http_info(end_date, group_by, interval, start_date, type, workflow, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_works_summary_retrieve_with_http_info(self, end_date : Optional[datetime] = None, group_by : Optional[StrictStr] = None, interval : Annotated[Optional[StrictStr], Field(description="* `daily` - daily * `weekly` - weekly * `monthly` - monthly * `annually` - annually")] = None, start_date : Optional[datetime] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Work Summary  # noqa: E501

        Get Work Summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_works_summary_retrieve_with_http_info(end_date, group_by, interval, start_date, type, workflow, async_req=True)
        >>> result = thread.get()

        :param end_date:
        :type end_date: datetime
        :param group_by:
        :type group_by: str
        :param interval: * `daily` - daily * `weekly` - weekly * `monthly` - monthly * `annually` - annually
        :type interval: str
        :param start_date:
        :type start_date: datetime
        :param type: Type of the work  * `CHARGE` - Charge * `EXPLORE` - Explore * `PAYLOAD_MOVE` - Payload Move * `ADHOC_MOVE_POSITION` - Adhoc Move Position * `ADHOC_MOVE_REGION` - Adhoc Move Region * `ADHOC_MOVE_SPOT` - Adhoc Move Spot
        :type type: List[str]
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3Work, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'end_date',
            'group_by',
            'interval',
            'start_date',
            'type',
            'workflow'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_works_summary_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('end_date') is not None:  # noqa: E501
            if isinstance(_params['end_date'], datetime):
                _query_params.append(('end_date', _params['end_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end_date', _params['end_date']))

        if _params.get('group_by') is not None:  # noqa: E501
            _query_params.append(('group_by', _params['group_by']))

        if _params.get('interval') is not None:  # noqa: E501
            _query_params.append(('interval', _params['interval']))

        if _params.get('start_date') is not None:  # noqa: E501
            if isinstance(_params['start_date'], datetime):
                _query_params.append(('start_date', _params['start_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start_date', _params['start_date']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        if _params.get('workflow') is not None:  # noqa: E501
            _query_params.append(('workflow', _params['workflow']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3Work",
        }

        return self.api_client.call_api(
            '/v3/works/summary', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
