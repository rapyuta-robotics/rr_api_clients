# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, conint, constr
from io_amr_gwm.models.point_request import PointRequest

class PatchedNodeRequest(BaseModel):
    """
    PatchedNodeRequest
    """
    id: Optional[conint(strict=True, le=9007199254740991, ge=1)] = Field(None, description="user defined `id` of this object. Must be unique in the site or map (for nodes and edges); Default random 53 bit integer")
    pos: Optional[PointRequest] = None
    radius: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Node radius")
    meta_data: Optional[Dict[str, Any]] = Field(None, description="optional JSON encoded metadata for this object")
    parkable: Optional[StrictBool] = None
    preserve: Optional[StrictBool] = Field(None, description="If True, node is excluded from deletion, unless deleted by force")
    type: Optional[constr(strict=True, max_length=50)] = Field(None, description="User defined node type")
    __properties = ["id", "pos", "radius", "meta_data", "parkable", "preserve", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedNodeRequest:
        """Create an instance of PatchedNodeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pos
        if self.pos:
            _dict['pos'] = self.pos.to_dict()
        # set to None if meta_data (nullable) is None
        # and __fields_set__ contains the field
        if self.meta_data is None and "meta_data" in self.__fields_set__:
            _dict['meta_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedNodeRequest:
        """Create an instance of PatchedNodeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedNodeRequest.parse_obj(obj)

        _obj = PatchedNodeRequest.parse_obj({
            "id": obj.get("id"),
            "pos": PointRequest.from_dict(obj.get("pos")) if obj.get("pos") is not None else None,
            "radius": obj.get("radius"),
            "meta_data": obj.get("meta_data"),
            "parkable": obj.get("parkable"),
            "preserve": obj.get("preserve"),
            "type": obj.get("type")
        })
        return _obj


