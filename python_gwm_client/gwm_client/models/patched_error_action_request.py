# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, conint, constr

class PatchedErrorActionRequest(BaseModel):
    """
    PatchedErrorActionRequest
    """
    id: Optional[conint(strict=True, le=9007199254740991, ge=1)] = Field(None, description="user defined `id` of this object. Must be unique in the site or map (for nodes and edges); Default random 53 bit integer")
    name: Optional[constr(strict=True, max_length=100)] = Field(None, description="user defined `name` of this object. Must be unique in the site or map (for nodes and edges)")
    description: Optional[constr(strict=True, min_length=1)] = Field(None, description="A description of what this error action does")
    var_schema: Optional[Dict[str, Any]] = Field(None, alias="schema", description="Schema description for the meta_data using (http://json-schema.org/learn/getting-started-step-by-step)")
    auto_recovery_action_schema: Optional[Dict[str, Any]] = Field(None, description="Schema description for the auto recovery action content using (http://json-schema.org/learn/getting-started-step-by-step)")
    __properties = ["id", "name", "description", "schema", "auto_recovery_action_schema"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedErrorActionRequest:
        """Create an instance of PatchedErrorActionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if auto_recovery_action_schema (nullable) is None
        # and __fields_set__ contains the field
        if self.auto_recovery_action_schema is None and "auto_recovery_action_schema" in self.__fields_set__:
            _dict['auto_recovery_action_schema'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedErrorActionRequest:
        """Create an instance of PatchedErrorActionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedErrorActionRequest.parse_obj(obj)

        _obj = PatchedErrorActionRequest.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "var_schema": obj.get("schema"),
            "auto_recovery_action_schema": obj.get("auto_recovery_action_schema")
        })
        return _obj


