# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: api-client-testing
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator

class WorkflowExecutionBulkUpdateSerializerV1(BaseModel):
    """
    WorkflowExecutionBulkUpdateSerializerV1
    """
    id: Optional[StrictStr] = None
    type: StrictStr = Field(..., description="The workflow type.")
    status: Optional[StrictStr] = Field(None, description="Status of the workflow execution.  * `PENDING` - Pending * `RUNNING` - Running * `COMPLETED` - Completed * `FAILED` - Failed * `CANCELED` - Canceled * `TERMINATED` - Terminated * `CONTINUED_AS_NEW` - Continued as new * `TIMED_OUT` - Timed out")
    data: Dict[str, Any] = Field(..., description="The workflow execution input data.")
    result: Optional[Dict[str, Any]] = Field(None, description="The workflow execution result.")
    context: Optional[Dict[str, Any]] = Field(None, description="The workflow execution context.")
    start_time: Optional[datetime] = Field(..., description="Timestamp of when the workflow execution was started.")
    end_time: Optional[datetime] = Field(..., description="Timestamp of when the workflow execution was ended.")
    insert_time: datetime = Field(..., description="Timestamp of when the resource was created.")
    update_time: datetime = Field(..., description="Timestamp of when the resource was last modified.")
    __properties = ["id", "type", "status", "data", "result", "context", "start_time", "end_time", "insert_time", "update_time"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELED', 'TERMINATED', 'CONTINUED_AS_NEW', 'TIMED_OUT'):
            raise ValueError("must be one of enum values ('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELED', 'TERMINATED', 'CONTINUED_AS_NEW', 'TIMED_OUT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> WorkflowExecutionBulkUpdateSerializerV1:
        """Create an instance of WorkflowExecutionBulkUpdateSerializerV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "type",
                            "data",
                            "start_time",
                            "end_time",
                            "insert_time",
                            "update_time",
                          },
                          exclude_none=True)
        # set to None if start_time (nullable) is None
        # and __fields_set__ contains the field
        if self.start_time is None and "start_time" in self.__fields_set__:
            _dict['start_time'] = None

        # set to None if end_time (nullable) is None
        # and __fields_set__ contains the field
        if self.end_time is None and "end_time" in self.__fields_set__:
            _dict['end_time'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> WorkflowExecutionBulkUpdateSerializerV1:
        """Create an instance of WorkflowExecutionBulkUpdateSerializerV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkflowExecutionBulkUpdateSerializerV1.parse_obj(obj)

        _obj = WorkflowExecutionBulkUpdateSerializerV1.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "data": obj.get("data"),
            "result": obj.get("result"),
            "context": obj.get("context"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "insert_time": obj.get("insert_time"),
            "update_time": obj.get("update_time")
        })
        return _obj


