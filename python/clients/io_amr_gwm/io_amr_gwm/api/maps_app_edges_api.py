# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import List, Optional

from io_amr_gwm.models.edge import Edge
from io_amr_gwm.models.edge_request import EdgeRequest
from io_amr_gwm.models.patched_edge_request import PatchedEdgeRequest

from io_amr_gwm.api_client import ApiClient
from io_amr_gwm.api_response import ApiResponse
from io_amr_gwm.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MapsAppEdgesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v1_map_edge_create(self, map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], edge_request : conlist(EdgeRequest), intersects_region : Optional[StrictStr] = None, node : Optional[StrictStr] = None, within_region : Optional[StrictStr] = None, **kwargs) -> List[Edge]:  # noqa: E501
        """v1_map_edge_create  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_create(map_id_or_name, edge_request, intersects_region, node, within_region, async_req=True)
        >>> result = thread.get()

        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param edge_request: (required)
        :type edge_request: List[EdgeRequest]
        :param intersects_region:
        :type intersects_region: str
        :param node:
        :type node: str
        :param within_region:
        :type within_region: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Edge]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_map_edge_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_map_edge_create_with_http_info(map_id_or_name, edge_request, intersects_region, node, within_region, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_map_edge_create_with_http_info(self, map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], edge_request : conlist(EdgeRequest), intersects_region : Optional[StrictStr] = None, node : Optional[StrictStr] = None, within_region : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_map_edge_create  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_create_with_http_info(map_id_or_name, edge_request, intersects_region, node, within_region, async_req=True)
        >>> result = thread.get()

        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param edge_request: (required)
        :type edge_request: List[EdgeRequest]
        :param intersects_region:
        :type intersects_region: str
        :param node:
        :type node: str
        :param within_region:
        :type within_region: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Edge], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'map_id_or_name',
            'edge_request',
            'intersects_region',
            'node',
            'within_region'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_map_edge_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['map_id_or_name']:
            _path_params['map_id_or_name'] = _params['map_id_or_name']


        # process the query parameters
        _query_params = []
        if _params.get('intersects_region') is not None:  # noqa: E501
            _query_params.append(('intersects_region', _params['intersects_region']))

        if _params.get('node') is not None:  # noqa: E501
            _query_params.append(('node', _params['node']))

        if _params.get('within_region') is not None:  # noqa: E501
            _query_params.append(('within_region', _params['within_region']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['edge_request'] is not None:
            _body_params = _params['edge_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "List[Edge]",
        }

        return self.api_client.call_api(
            '/v1/map/{map_id_or_name}/edge', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_map_edge_delete_destroy(self, map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], force : Annotated[Optional[StrictBool], Field(description="force clear all resources, including preserved ones")] = None, **kwargs) -> None:  # noqa: E501
        """v1_map_edge_delete_destroy  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_delete_destroy(map_id_or_name, force, async_req=True)
        >>> result = thread.get()

        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param force: force clear all resources, including preserved ones
        :type force: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_map_edge_delete_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_map_edge_delete_destroy_with_http_info(map_id_or_name, force, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_map_edge_delete_destroy_with_http_info(self, map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], force : Annotated[Optional[StrictBool], Field(description="force clear all resources, including preserved ones")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_map_edge_delete_destroy  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_delete_destroy_with_http_info(map_id_or_name, force, async_req=True)
        >>> result = thread.get()

        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param force: force clear all resources, including preserved ones
        :type force: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'map_id_or_name',
            'force'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_map_edge_delete_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['map_id_or_name']:
            _path_params['map_id_or_name'] = _params['map_id_or_name']


        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/map/{map_id_or_name}/edge/delete', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_map_edge_destroy(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this edge.")], map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], **kwargs) -> None:  # noqa: E501
        """v1_map_edge_destroy  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_destroy(id, map_id_or_name, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this edge. (required)
        :type id: int
        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_map_edge_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_map_edge_destroy_with_http_info(id, map_id_or_name, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_map_edge_destroy_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this edge.")], map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], **kwargs) -> ApiResponse:  # noqa: E501
        """v1_map_edge_destroy  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_destroy_with_http_info(id, map_id_or_name, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this edge. (required)
        :type id: int
        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id',
            'map_id_or_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_map_edge_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['map_id_or_name']:
            _path_params['map_id_or_name'] = _params['map_id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/map/{map_id_or_name}/edge/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_map_edge_list(self, map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], intersects_region : Annotated[Optional[StrictStr], Field(description="filter edges which are crossing a region with id or name")] = None, node : Annotated[Optional[StrictInt], Field(description="filter edges connected to the node")] = None, within_region : Annotated[Optional[StrictStr], Field(description="filter edges which are within a region with id or name")] = None, **kwargs) -> List[Edge]:  # noqa: E501
        """v1_map_edge_list  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_list(map_id_or_name, intersects_region, node, within_region, async_req=True)
        >>> result = thread.get()

        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param intersects_region: filter edges which are crossing a region with id or name
        :type intersects_region: str
        :param node: filter edges connected to the node
        :type node: int
        :param within_region: filter edges which are within a region with id or name
        :type within_region: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Edge]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_map_edge_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_map_edge_list_with_http_info(map_id_or_name, intersects_region, node, within_region, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_map_edge_list_with_http_info(self, map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], intersects_region : Annotated[Optional[StrictStr], Field(description="filter edges which are crossing a region with id or name")] = None, node : Annotated[Optional[StrictInt], Field(description="filter edges connected to the node")] = None, within_region : Annotated[Optional[StrictStr], Field(description="filter edges which are within a region with id or name")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_map_edge_list  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_list_with_http_info(map_id_or_name, intersects_region, node, within_region, async_req=True)
        >>> result = thread.get()

        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param intersects_region: filter edges which are crossing a region with id or name
        :type intersects_region: str
        :param node: filter edges connected to the node
        :type node: int
        :param within_region: filter edges which are within a region with id or name
        :type within_region: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Edge], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'map_id_or_name',
            'intersects_region',
            'node',
            'within_region'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_map_edge_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['map_id_or_name']:
            _path_params['map_id_or_name'] = _params['map_id_or_name']


        # process the query parameters
        _query_params = []
        if _params.get('intersects_region') is not None:  # noqa: E501
            _query_params.append(('intersects_region', _params['intersects_region']))

        if _params.get('node') is not None:  # noqa: E501
            _query_params.append(('node', _params['node']))

        if _params.get('within_region') is not None:  # noqa: E501
            _query_params.append(('within_region', _params['within_region']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[Edge]",
        }

        return self.api_client.call_api(
            '/v1/map/{map_id_or_name}/edge', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_map_edge_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this edge.")], map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], patched_edge_request : Optional[PatchedEdgeRequest] = None, **kwargs) -> Edge:  # noqa: E501
        """v1_map_edge_partial_update  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_partial_update(id, map_id_or_name, patched_edge_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this edge. (required)
        :type id: int
        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param patched_edge_request:
        :type patched_edge_request: PatchedEdgeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Edge
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_map_edge_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_map_edge_partial_update_with_http_info(id, map_id_or_name, patched_edge_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_map_edge_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this edge.")], map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], patched_edge_request : Optional[PatchedEdgeRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_map_edge_partial_update  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_partial_update_with_http_info(id, map_id_or_name, patched_edge_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this edge. (required)
        :type id: int
        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param patched_edge_request:
        :type patched_edge_request: PatchedEdgeRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Edge, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'map_id_or_name',
            'patched_edge_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_map_edge_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['map_id_or_name']:
            _path_params['map_id_or_name'] = _params['map_id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_edge_request'] is not None:
            _body_params = _params['patched_edge_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "Edge",
        }

        return self.api_client.call_api(
            '/v1/map/{map_id_or_name}/edge/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_map_edge_retrieve(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this edge.")], map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], **kwargs) -> Edge:  # noqa: E501
        """v1_map_edge_retrieve  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_retrieve(id, map_id_or_name, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this edge. (required)
        :type id: int
        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Edge
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_map_edge_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_map_edge_retrieve_with_http_info(id, map_id_or_name, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_map_edge_retrieve_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this edge.")], map_id_or_name : Annotated[StrictStr, Field(..., description="MAP ID or Name")], **kwargs) -> ApiResponse:  # noqa: E501
        """v1_map_edge_retrieve  # noqa: E501

        Manage Routing Graph Edges  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_map_edge_retrieve_with_http_info(id, map_id_or_name, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this edge. (required)
        :type id: int
        :param map_id_or_name: MAP ID or Name (required)
        :type map_id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Edge, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'map_id_or_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_map_edge_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']

        if _params['map_id_or_name']:
            _path_params['map_id_or_name'] = _params['map_id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "Edge",
        }

        return self.api_client.call_api(
            '/v1/map/{map_id_or_name}/edge/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
