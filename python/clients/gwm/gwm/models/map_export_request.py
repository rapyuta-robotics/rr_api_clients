# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, conint, conlist, constr
from gwm.models.edge_request import EdgeRequest
from gwm.models.layer_request import LayerRequest
from gwm.models.node_request import NodeRequest
from gwm.models.region_export_request import RegionExportRequest
from gwm.models.spot_annotation_export_request import SpotAnnotationExportRequest

class MapExportRequest(BaseModel):
    """
    MapExportRequest
    """
    name: Optional[constr(strict=True, max_length=100)] = Field(None, description="user defined `name` of this object. Must be unique in the site or map (for nodes and edges)")
    floor: Optional[conint(strict=True, le=32767, ge=-32768)] = Field(None, description="Floor of the site this map corresponds to")
    meta_data: Optional[Dict[str, Any]] = Field(None, description="optional JSON encoded metadata for this object")
    layers: Optional[conlist(LayerRequest)] = None
    nodes: Optional[conlist(NodeRequest)] = None
    regions: Optional[conlist(RegionExportRequest)] = None
    edges: Optional[conlist(EdgeRequest)] = None
    spots: Optional[conlist(SpotAnnotationExportRequest)] = None
    id: Optional[conint(strict=True, le=9007199254740991, ge=1)] = Field(None, description="user defined `id` of this object. Must be unique in the site or map (for nodes and edges); Default random 53 bit integer")
    __properties = ["name", "floor", "meta_data", "layers", "nodes", "regions", "edges", "spots", "id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> MapExportRequest:
        """Create an instance of MapExportRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in layers (list)
        _items = []
        if self.layers:
            for _item in self.layers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['layers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item in self.nodes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in regions (list)
        _items = []
        if self.regions:
            for _item in self.regions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['regions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item in self.edges:
                if _item:
                    _items.append(_item.to_dict())
            _dict['edges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in spots (list)
        _items = []
        if self.spots:
            for _item in self.spots:
                if _item:
                    _items.append(_item.to_dict())
            _dict['spots'] = _items
        # set to None if meta_data (nullable) is None
        # and __fields_set__ contains the field
        if self.meta_data is None and "meta_data" in self.__fields_set__:
            _dict['meta_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> MapExportRequest:
        """Create an instance of MapExportRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MapExportRequest.parse_obj(obj)

        _obj = MapExportRequest.parse_obj({
            "name": obj.get("name"),
            "floor": obj.get("floor"),
            "meta_data": obj.get("meta_data"),
            "layers": [LayerRequest.from_dict(_item) for _item in obj.get("layers")] if obj.get("layers") is not None else None,
            "nodes": [NodeRequest.from_dict(_item) for _item in obj.get("nodes")] if obj.get("nodes") is not None else None,
            "regions": [RegionExportRequest.from_dict(_item) for _item in obj.get("regions")] if obj.get("regions") is not None else None,
            "edges": [EdgeRequest.from_dict(_item) for _item in obj.get("edges")] if obj.get("edges") is not None else None,
            "spots": [SpotAnnotationExportRequest.from_dict(_item) for _item in obj.get("spots")] if obj.get("spots") is not None else None,
            "id": obj.get("id")
        })
        return _obj


