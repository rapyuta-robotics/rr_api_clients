# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conlist

from typing import List, Optional

from gwm.models.patched_region_request import PatchedRegionRequest
from gwm.models.region import Region
from gwm.models.region_db_json import RegionDbJson
from gwm.models.region_request import RegionRequest

from gwm.api_client import ApiClient
from gwm.api_response import ApiResponse
from gwm.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class MapsAppRegionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v1_region_create(self, region_request : RegionRequest, **kwargs) -> Region:  # noqa: E501
        """v1_region_create  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_create(region_request, async_req=True)
        >>> result = thread.get()

        :param region_request: (required)
        :type region_request: RegionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Region
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_create_with_http_info(region_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_create_with_http_info(self, region_request : RegionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_create  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_create_with_http_info(region_request, async_req=True)
        >>> result = thread.get()

        :param region_request: (required)
        :type region_request: RegionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Region, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'region_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['region_request'] is not None:
            _body_params = _params['region_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "Region",
        }

        return self.api_client.call_api(
            '/v1/region', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_region_delete_destroy(self, map_id : StrictStr, force : Annotated[Optional[StrictBool], Field(description="force clear all resources, including preserved ones")] = None, type : Annotated[Optional[StrictStr], Field(description="delete resources by type")] = None, **kwargs) -> None:  # noqa: E501
        """v1_region_delete_destroy  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_delete_destroy(map_id, force, type, async_req=True)
        >>> result = thread.get()

        :param map_id: (required)
        :type map_id: str
        :param force: force clear all resources, including preserved ones
        :type force: bool
        :param type: delete resources by type
        :type type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_delete_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_delete_destroy_with_http_info(map_id, force, type, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_delete_destroy_with_http_info(self, map_id : StrictStr, force : Annotated[Optional[StrictBool], Field(description="force clear all resources, including preserved ones")] = None, type : Annotated[Optional[StrictStr], Field(description="delete resources by type")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_delete_destroy  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_delete_destroy_with_http_info(map_id, force, type, async_req=True)
        >>> result = thread.get()

        :param map_id: (required)
        :type map_id: str
        :param force: force clear all resources, including preserved ones
        :type force: bool
        :param type: delete resources by type
        :type type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'map_id',
            'force',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_delete_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('force') is not None:  # noqa: E501
            _query_params.append(('force', _params['force']))

        if _params.get('map_id') is not None:  # noqa: E501
            _query_params.append(('map_id', _params['map_id']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/region/delete', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_region_destroy(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], **kwargs) -> None:  # noqa: E501
        """v1_region_destroy  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_destroy(id_or_name, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_destroy_with_http_info(id_or_name, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_destroy_with_http_info(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_destroy  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_destroy_with_http_info(id_or_name, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id_or_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_name']:
            _path_params['id_or_name'] = _params['id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/region/{id_or_name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_region_list(self, contains_point : Annotated[Optional[StrictStr], Field(description="find all regions that contain the point in format : `X,Y`")] = None, external_device : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by associated external devices")] = None, id : Annotated[Optional[conlist(StrictInt)], Field(description="filter regions by id")] = None, intersects_region : Annotated[Optional[StrictStr], Field(description="filter regions that intersect with region with given name or id")] = None, map : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by maps")] = None, name : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by name(s)")] = None, preserve : Optional[StrictBool] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by type(s)")] = None, within_region : Annotated[Optional[StrictStr], Field(description="filter regions that is included by region with given name or id")] = None, **kwargs) -> List[RegionDbJson]:  # noqa: E501
        """v1_region_list  # noqa: E501

        List Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_list(contains_point, external_device, id, intersects_region, map, name, preserve, type, within_region, async_req=True)
        >>> result = thread.get()

        :param contains_point: find all regions that contain the point in format : `X,Y`
        :type contains_point: str
        :param external_device: filter regions by associated external devices
        :type external_device: List[str]
        :param id: filter regions by id
        :type id: List[int]
        :param intersects_region: filter regions that intersect with region with given name or id
        :type intersects_region: str
        :param map: filter regions by maps
        :type map: List[str]
        :param name: filter regions by name(s)
        :type name: List[str]
        :param preserve:
        :type preserve: bool
        :param type: filter regions by type(s)
        :type type: List[str]
        :param within_region: filter regions that is included by region with given name or id
        :type within_region: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[RegionDbJson]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_list_with_http_info(contains_point, external_device, id, intersects_region, map, name, preserve, type, within_region, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_list_with_http_info(self, contains_point : Annotated[Optional[StrictStr], Field(description="find all regions that contain the point in format : `X,Y`")] = None, external_device : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by associated external devices")] = None, id : Annotated[Optional[conlist(StrictInt)], Field(description="filter regions by id")] = None, intersects_region : Annotated[Optional[StrictStr], Field(description="filter regions that intersect with region with given name or id")] = None, map : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by maps")] = None, name : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by name(s)")] = None, preserve : Optional[StrictBool] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="filter regions by type(s)")] = None, within_region : Annotated[Optional[StrictStr], Field(description="filter regions that is included by region with given name or id")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_list  # noqa: E501

        List Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_list_with_http_info(contains_point, external_device, id, intersects_region, map, name, preserve, type, within_region, async_req=True)
        >>> result = thread.get()

        :param contains_point: find all regions that contain the point in format : `X,Y`
        :type contains_point: str
        :param external_device: filter regions by associated external devices
        :type external_device: List[str]
        :param id: filter regions by id
        :type id: List[int]
        :param intersects_region: filter regions that intersect with region with given name or id
        :type intersects_region: str
        :param map: filter regions by maps
        :type map: List[str]
        :param name: filter regions by name(s)
        :type name: List[str]
        :param preserve:
        :type preserve: bool
        :param type: filter regions by type(s)
        :type type: List[str]
        :param within_region: filter regions that is included by region with given name or id
        :type within_region: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[RegionDbJson], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'contains_point',
            'external_device',
            'id',
            'intersects_region',
            'map',
            'name',
            'preserve',
            'type',
            'within_region'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('contains_point') is not None:  # noqa: E501
            _query_params.append(('contains_point', _params['contains_point']))

        if _params.get('external_device') is not None:  # noqa: E501
            _query_params.append(('external_device', _params['external_device']))
            _collection_formats['external_device'] = 'multi'

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('intersects_region') is not None:  # noqa: E501
            _query_params.append(('intersects_region', _params['intersects_region']))

        if _params.get('map') is not None:  # noqa: E501
            _query_params.append(('map', _params['map']))
            _collection_formats['map'] = 'multi'

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))
            _collection_formats['name'] = 'multi'

        if _params.get('preserve') is not None:  # noqa: E501
            _query_params.append(('preserve', _params['preserve']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        if _params.get('within_region') is not None:  # noqa: E501
            _query_params.append(('within_region', _params['within_region']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[RegionDbJson]",
        }

        return self.api_client.call_api(
            '/v1/region', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_region_partial_update(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], patched_region_request : Optional[PatchedRegionRequest] = None, **kwargs) -> Region:  # noqa: E501
        """v1_region_partial_update  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_partial_update(id_or_name, patched_region_request, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param patched_region_request:
        :type patched_region_request: PatchedRegionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Region
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_partial_update_with_http_info(id_or_name, patched_region_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_partial_update_with_http_info(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], patched_region_request : Optional[PatchedRegionRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_partial_update  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_partial_update_with_http_info(id_or_name, patched_region_request, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param patched_region_request:
        :type patched_region_request: PatchedRegionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Region, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_name',
            'patched_region_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_name']:
            _path_params['id_or_name'] = _params['id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_region_request'] is not None:
            _body_params = _params['patched_region_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "Region",
        }

        return self.api_client.call_api(
            '/v1/region/{id_or_name}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_region_retrieve(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], **kwargs) -> Region:  # noqa: E501
        """v1_region_retrieve  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_retrieve(id_or_name, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Region
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_retrieve_with_http_info(id_or_name, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_retrieve_with_http_info(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_retrieve  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_retrieve_with_http_info(id_or_name, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Region, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_name']:
            _path_params['id_or_name'] = _params['id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "Region",
        }

        return self.api_client.call_api(
            '/v1/region/{id_or_name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_region_update(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], region_request : RegionRequest, **kwargs) -> Region:  # noqa: E501
        """v1_region_update  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_update(id_or_name, region_request, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param region_request: (required)
        :type region_request: RegionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Region
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_region_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_region_update_with_http_info(id_or_name, region_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_region_update_with_http_info(self, id_or_name : Annotated[StrictStr, Field(..., description="Region ID or Name.")], region_request : RegionRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_region_update  # noqa: E501

        Manage Regions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_region_update_with_http_info(id_or_name, region_request, async_req=True)
        >>> result = thread.get()

        :param id_or_name: Region ID or Name. (required)
        :type id_or_name: str
        :param region_request: (required)
        :type region_request: RegionRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Region, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id_or_name',
            'region_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_region_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id_or_name']:
            _path_params['id_or_name'] = _params['id_or_name']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['region_request'] is not None:
            _body_params = _params['region_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "Region",
        }

        return self.api_client.call_api(
            '/v1/region/{id_or_name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
