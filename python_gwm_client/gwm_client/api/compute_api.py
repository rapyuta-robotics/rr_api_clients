# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: api-client-testing
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictStr, conlist

from typing import List, Optional

from gwm_client.models.patched_workflow_execution_update_serializer_v1_request import PatchedWorkflowExecutionUpdateSerializerV1Request
from gwm_client.models.workflow_execution_bulk_update_serializer_v1 import WorkflowExecutionBulkUpdateSerializerV1
from gwm_client.models.workflow_execution_bulk_update_serializer_v1_request import WorkflowExecutionBulkUpdateSerializerV1Request
from gwm_client.models.workflow_execution_serializer_v1 import WorkflowExecutionSerializerV1
from gwm_client.models.workflow_execution_serializer_v1_request import WorkflowExecutionSerializerV1Request
from gwm_client.models.workflow_execution_update_serializer_v1 import WorkflowExecutionUpdateSerializerV1
from gwm_client.models.workflow_execution_update_serializer_v1_request import WorkflowExecutionUpdateSerializerV1Request

from gwm_client.api_client import ApiClient
from gwm_client.api_response import ApiResponse
from gwm_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ComputeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def compute_v1_workflows_executions_bulk_create(self, workflow_execution_serializer_v1_request : conlist(WorkflowExecutionSerializerV1Request), **kwargs) -> List[WorkflowExecutionSerializerV1]:  # noqa: E501
        """compute_v1_workflows_executions_bulk_create  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_bulk_create(workflow_execution_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param workflow_execution_serializer_v1_request: (required)
        :type workflow_execution_serializer_v1_request: List[WorkflowExecutionSerializerV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WorkflowExecutionSerializerV1]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_bulk_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_bulk_create_with_http_info(workflow_execution_serializer_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_bulk_create_with_http_info(self, workflow_execution_serializer_v1_request : conlist(WorkflowExecutionSerializerV1Request), **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_bulk_create  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_bulk_create_with_http_info(workflow_execution_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param workflow_execution_serializer_v1_request: (required)
        :type workflow_execution_serializer_v1_request: List[WorkflowExecutionSerializerV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WorkflowExecutionSerializerV1], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workflow_execution_serializer_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_bulk_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['workflow_execution_serializer_v1_request'] is not None:
            _body_params = _params['workflow_execution_serializer_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "List[WorkflowExecutionSerializerV1]",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/bulk/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_bulk_partial_update(self, workflow_execution_bulk_update_serializer_v1_request : conlist(WorkflowExecutionBulkUpdateSerializerV1Request), **kwargs) -> List[WorkflowExecutionBulkUpdateSerializerV1]:  # noqa: E501
        """compute_v1_workflows_executions_bulk_partial_update  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_bulk_partial_update(workflow_execution_bulk_update_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param workflow_execution_bulk_update_serializer_v1_request: (required)
        :type workflow_execution_bulk_update_serializer_v1_request: List[WorkflowExecutionBulkUpdateSerializerV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WorkflowExecutionBulkUpdateSerializerV1]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_bulk_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_bulk_partial_update_with_http_info(workflow_execution_bulk_update_serializer_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_bulk_partial_update_with_http_info(self, workflow_execution_bulk_update_serializer_v1_request : conlist(WorkflowExecutionBulkUpdateSerializerV1Request), **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_bulk_partial_update  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_bulk_partial_update_with_http_info(workflow_execution_bulk_update_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param workflow_execution_bulk_update_serializer_v1_request: (required)
        :type workflow_execution_bulk_update_serializer_v1_request: List[WorkflowExecutionBulkUpdateSerializerV1Request]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WorkflowExecutionBulkUpdateSerializerV1], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workflow_execution_bulk_update_serializer_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_bulk_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['workflow_execution_bulk_update_serializer_v1_request'] is not None:
            _body_params = _params['workflow_execution_bulk_update_serializer_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[WorkflowExecutionBulkUpdateSerializerV1]",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/bulk/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_create(self, workflow_execution_serializer_v1_request : WorkflowExecutionSerializerV1Request, **kwargs) -> WorkflowExecutionSerializerV1:  # noqa: E501
        """compute_v1_workflows_executions_create  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_create(workflow_execution_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param workflow_execution_serializer_v1_request: (required)
        :type workflow_execution_serializer_v1_request: WorkflowExecutionSerializerV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkflowExecutionSerializerV1
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_create_with_http_info(workflow_execution_serializer_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_create_with_http_info(self, workflow_execution_serializer_v1_request : WorkflowExecutionSerializerV1Request, **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_create  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_create_with_http_info(workflow_execution_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param workflow_execution_serializer_v1_request: (required)
        :type workflow_execution_serializer_v1_request: WorkflowExecutionSerializerV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkflowExecutionSerializerV1, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'workflow_execution_serializer_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['workflow_execution_serializer_v1_request'] is not None:
            _body_params = _params['workflow_execution_serializer_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "WorkflowExecutionSerializerV1",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_destroy(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], **kwargs) -> None:  # noqa: E501
        """compute_v1_workflows_executions_destroy  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_destroy(id, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_destroy_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_destroy_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_destroy  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/{id}/', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_list(self, context : Annotated[Optional[StrictStr], Field(description="filter by context query")] = None, end_time_after : Optional[datetime] = None, end_time_before : Optional[datetime] = None, id : Optional[StrictStr] = None, insert_time_after : Optional[datetime] = None, insert_time_before : Optional[datetime] = None, start_time_after : Optional[datetime] = None, start_time_before : Optional[datetime] = None, status : Annotated[Optional[StrictStr], Field(description="Status of the workflow execution.  * `PENDING` - Pending * `RUNNING` - Running * `COMPLETED` - Completed * `FAILED` - Failed * `CANCELED` - Canceled * `TERMINATED` - Terminated * `CONTINUED_AS_NEW` - Continued as new * `TIMED_OUT` - Timed out")] = None, type : Annotated[Optional[StrictStr], Field(description="The workflow type.")] = None, update_time_after : Optional[datetime] = None, update_time_before : Optional[datetime] = None, **kwargs) -> List[WorkflowExecutionSerializerV1]:  # noqa: E501
        """compute_v1_workflows_executions_list  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_list(context, end_time_after, end_time_before, id, insert_time_after, insert_time_before, start_time_after, start_time_before, status, type, update_time_after, update_time_before, async_req=True)
        >>> result = thread.get()

        :param context: filter by context query
        :type context: str
        :param end_time_after:
        :type end_time_after: datetime
        :param end_time_before:
        :type end_time_before: datetime
        :param id:
        :type id: str
        :param insert_time_after:
        :type insert_time_after: datetime
        :param insert_time_before:
        :type insert_time_before: datetime
        :param start_time_after:
        :type start_time_after: datetime
        :param start_time_before:
        :type start_time_before: datetime
        :param status: Status of the workflow execution.  * `PENDING` - Pending * `RUNNING` - Running * `COMPLETED` - Completed * `FAILED` - Failed * `CANCELED` - Canceled * `TERMINATED` - Terminated * `CONTINUED_AS_NEW` - Continued as new * `TIMED_OUT` - Timed out
        :type status: str
        :param type: The workflow type.
        :type type: str
        :param update_time_after:
        :type update_time_after: datetime
        :param update_time_before:
        :type update_time_before: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[WorkflowExecutionSerializerV1]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_list_with_http_info(context, end_time_after, end_time_before, id, insert_time_after, insert_time_before, start_time_after, start_time_before, status, type, update_time_after, update_time_before, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_list_with_http_info(self, context : Annotated[Optional[StrictStr], Field(description="filter by context query")] = None, end_time_after : Optional[datetime] = None, end_time_before : Optional[datetime] = None, id : Optional[StrictStr] = None, insert_time_after : Optional[datetime] = None, insert_time_before : Optional[datetime] = None, start_time_after : Optional[datetime] = None, start_time_before : Optional[datetime] = None, status : Annotated[Optional[StrictStr], Field(description="Status of the workflow execution.  * `PENDING` - Pending * `RUNNING` - Running * `COMPLETED` - Completed * `FAILED` - Failed * `CANCELED` - Canceled * `TERMINATED` - Terminated * `CONTINUED_AS_NEW` - Continued as new * `TIMED_OUT` - Timed out")] = None, type : Annotated[Optional[StrictStr], Field(description="The workflow type.")] = None, update_time_after : Optional[datetime] = None, update_time_before : Optional[datetime] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_list  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_list_with_http_info(context, end_time_after, end_time_before, id, insert_time_after, insert_time_before, start_time_after, start_time_before, status, type, update_time_after, update_time_before, async_req=True)
        >>> result = thread.get()

        :param context: filter by context query
        :type context: str
        :param end_time_after:
        :type end_time_after: datetime
        :param end_time_before:
        :type end_time_before: datetime
        :param id:
        :type id: str
        :param insert_time_after:
        :type insert_time_after: datetime
        :param insert_time_before:
        :type insert_time_before: datetime
        :param start_time_after:
        :type start_time_after: datetime
        :param start_time_before:
        :type start_time_before: datetime
        :param status: Status of the workflow execution.  * `PENDING` - Pending * `RUNNING` - Running * `COMPLETED` - Completed * `FAILED` - Failed * `CANCELED` - Canceled * `TERMINATED` - Terminated * `CONTINUED_AS_NEW` - Continued as new * `TIMED_OUT` - Timed out
        :type status: str
        :param type: The workflow type.
        :type type: str
        :param update_time_after:
        :type update_time_after: datetime
        :param update_time_before:
        :type update_time_before: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[WorkflowExecutionSerializerV1], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'context',
            'end_time_after',
            'end_time_before',
            'id',
            'insert_time_after',
            'insert_time_before',
            'start_time_after',
            'start_time_before',
            'status',
            'type',
            'update_time_after',
            'update_time_before'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('context') is not None:  # noqa: E501
            _query_params.append(('context', _params['context']))

        if _params.get('end_time_after') is not None:  # noqa: E501
            if isinstance(_params['end_time_after'], datetime):
                _query_params.append(('end_time_after', _params['end_time_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end_time_after', _params['end_time_after']))

        if _params.get('end_time_before') is not None:  # noqa: E501
            if isinstance(_params['end_time_before'], datetime):
                _query_params.append(('end_time_before', _params['end_time_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end_time_before', _params['end_time_before']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))

        if _params.get('insert_time_after') is not None:  # noqa: E501
            if isinstance(_params['insert_time_after'], datetime):
                _query_params.append(('insert_time_after', _params['insert_time_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('insert_time_after', _params['insert_time_after']))

        if _params.get('insert_time_before') is not None:  # noqa: E501
            if isinstance(_params['insert_time_before'], datetime):
                _query_params.append(('insert_time_before', _params['insert_time_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('insert_time_before', _params['insert_time_before']))

        if _params.get('start_time_after') is not None:  # noqa: E501
            if isinstance(_params['start_time_after'], datetime):
                _query_params.append(('start_time_after', _params['start_time_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start_time_after', _params['start_time_after']))

        if _params.get('start_time_before') is not None:  # noqa: E501
            if isinstance(_params['start_time_before'], datetime):
                _query_params.append(('start_time_before', _params['start_time_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start_time_before', _params['start_time_before']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('update_time_after') is not None:  # noqa: E501
            if isinstance(_params['update_time_after'], datetime):
                _query_params.append(('update_time_after', _params['update_time_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('update_time_after', _params['update_time_after']))

        if _params.get('update_time_before') is not None:  # noqa: E501
            if isinstance(_params['update_time_before'], datetime):
                _query_params.append(('update_time_before', _params['update_time_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('update_time_before', _params['update_time_before']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[WorkflowExecutionSerializerV1]",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_partial_update(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], patched_workflow_execution_update_serializer_v1_request : Optional[PatchedWorkflowExecutionUpdateSerializerV1Request] = None, **kwargs) -> WorkflowExecutionUpdateSerializerV1:  # noqa: E501
        """compute_v1_workflows_executions_partial_update  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_partial_update(id, patched_workflow_execution_update_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param patched_workflow_execution_update_serializer_v1_request:
        :type patched_workflow_execution_update_serializer_v1_request: PatchedWorkflowExecutionUpdateSerializerV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkflowExecutionUpdateSerializerV1
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_partial_update_with_http_info(id, patched_workflow_execution_update_serializer_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_partial_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], patched_workflow_execution_update_serializer_v1_request : Optional[PatchedWorkflowExecutionUpdateSerializerV1Request] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_partial_update  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_partial_update_with_http_info(id, patched_workflow_execution_update_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param patched_workflow_execution_update_serializer_v1_request:
        :type patched_workflow_execution_update_serializer_v1_request: PatchedWorkflowExecutionUpdateSerializerV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkflowExecutionUpdateSerializerV1, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'patched_workflow_execution_update_serializer_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_workflow_execution_update_serializer_v1_request'] is not None:
            _body_params = _params['patched_workflow_execution_update_serializer_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WorkflowExecutionUpdateSerializerV1",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/{id}/', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_retrieve(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], **kwargs) -> WorkflowExecutionSerializerV1:  # noqa: E501
        """compute_v1_workflows_executions_retrieve  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkflowExecutionSerializerV1
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_retrieve_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_retrieve_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_retrieve  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkflowExecutionSerializerV1, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WorkflowExecutionSerializerV1",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/{id}/', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def compute_v1_workflows_executions_update(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], workflow_execution_update_serializer_v1_request : Optional[WorkflowExecutionUpdateSerializerV1Request] = None, **kwargs) -> WorkflowExecutionUpdateSerializerV1:  # noqa: E501
        """compute_v1_workflows_executions_update  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_update(id, workflow_execution_update_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param workflow_execution_update_serializer_v1_request:
        :type workflow_execution_update_serializer_v1_request: WorkflowExecutionUpdateSerializerV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: WorkflowExecutionUpdateSerializerV1
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the compute_v1_workflows_executions_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.compute_v1_workflows_executions_update_with_http_info(id, workflow_execution_update_serializer_v1_request, **kwargs)  # noqa: E501

    @validate_arguments
    def compute_v1_workflows_executions_update_with_http_info(self, id : Annotated[StrictStr, Field(..., description="A UUID string identifying this workflow execution.")], workflow_execution_update_serializer_v1_request : Optional[WorkflowExecutionUpdateSerializerV1Request] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """compute_v1_workflows_executions_update  # noqa: E501

        A view set for listing, retrieving and performing workflow executions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.compute_v1_workflows_executions_update_with_http_info(id, workflow_execution_update_serializer_v1_request, async_req=True)
        >>> result = thread.get()

        :param id: A UUID string identifying this workflow execution. (required)
        :type id: str
        :param workflow_execution_update_serializer_v1_request:
        :type workflow_execution_update_serializer_v1_request: WorkflowExecutionUpdateSerializerV1Request
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(WorkflowExecutionUpdateSerializerV1, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'workflow_execution_update_serializer_v1_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compute_v1_workflows_executions_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['workflow_execution_update_serializer_v1_request'] is not None:
            _body_params = _params['workflow_execution_update_serializer_v1_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "WorkflowExecutionUpdateSerializerV1",
        }

        return self.api_client.call_api(
            '/compute/v1/workflows/executions/{id}/', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
