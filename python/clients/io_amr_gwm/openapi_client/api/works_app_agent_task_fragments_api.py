# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictFloat, StrictInt, StrictStr, conint, conlist, validator

from typing import Optional, Union

from openapi_client.models.agent_task_fragment import AgentTaskFragment
from openapi_client.models.agent_task_fragment_request import AgentTaskFragmentRequest
from openapi_client.models.paginated_agent_task_fragment_list import PaginatedAgentTaskFragmentList
from openapi_client.models.patched_agent_task_fragment_request import PatchedAgentTaskFragmentRequest
from openapi_client.models.v1_containers_create_descriptor_parameter_inner import V1ContainersCreateDescriptorParameterInner

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorksAppAgentTaskFragmentsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v2_agent_task_fragments_bulk_patch_update_partial_update(self, patched_agent_task_fragment_request : Optional[PatchedAgentTaskFragmentRequest] = None, **kwargs) -> AgentTaskFragment:  # noqa: E501
        """v2_agent_task_fragments_bulk_patch_update_partial_update  # noqa: E501

        Get Agent Task Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_bulk_patch_update_partial_update(patched_agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param patched_agent_task_fragment_request:
        :type patched_agent_task_fragment_request: PatchedAgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_bulk_patch_update_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_bulk_patch_update_partial_update_with_http_info(patched_agent_task_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_bulk_patch_update_partial_update_with_http_info(self, patched_agent_task_fragment_request : Optional[PatchedAgentTaskFragmentRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v2_agent_task_fragments_bulk_patch_update_partial_update  # noqa: E501

        Get Agent Task Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_bulk_patch_update_partial_update_with_http_info(patched_agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param patched_agent_task_fragment_request:
        :type patched_agent_task_fragment_request: PatchedAgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'patched_agent_task_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_bulk_patch_update_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_agent_task_fragment_request'] is not None:
            _body_params = _params['patched_agent_task_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments/bulk_patch_update', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_create(self, agent_task_fragment_request : AgentTaskFragmentRequest, **kwargs) -> AgentTaskFragment:  # noqa: E501
        """Create Agent Task Fragment  # noqa: E501

        Create Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_create(agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param agent_task_fragment_request: (required)
        :type agent_task_fragment_request: AgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_create_with_http_info(agent_task_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_create_with_http_info(self, agent_task_fragment_request : AgentTaskFragmentRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Agent Task Fragment  # noqa: E501

        Create Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_create_with_http_info(agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param agent_task_fragment_request: (required)
        :type agent_task_fragment_request: AgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'agent_task_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['agent_task_fragment_request'] is not None:
            _body_params = _params['agent_task_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_destroy(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], **kwargs) -> None:  # noqa: E501
        """Delete Agent Task Fragment  # noqa: E501

        Delete Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_destroy(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_destroy_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_destroy_with_http_info(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Agent Task Fragment  # noqa: E501

        Delete Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v2/agent_task_fragments/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_list(self, agent : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="filter by agent id")] = None, agent_task : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="filter by agent_task id")] = None, detection_data : Annotated[Optional[StrictStr], Field(description="filter by detection_data query")] = None, drop_data : Annotated[Optional[StrictStr], Field(description="filter by drop_data query")] = None, end_date : Optional[datetime] = None, from_location : Annotated[Optional[StrictStr], Field(description="filter by from_location query")] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[conlist(StrictStr)] = None, ordering : Annotated[Optional[StrictStr], Field(description="order the result, default is ID")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, payload_data : Annotated[Optional[StrictStr], Field(description="filter by payload_data query")] = None, pick_data : Annotated[Optional[StrictStr], Field(description="filter by pick_data query")] = None, start_date : Optional[datetime] = None, status : Annotated[Optional[StrictStr], Field(description="filter by status")] = None, to_location : Annotated[Optional[StrictStr], Field(description="filter by to_location query")] = None, type : Annotated[Optional[StrictStr], Field(description="filter by type")] = None, work : Annotated[Optional[conlist(StrictStr)], Field(description="filter by work id")] = None, work_fragment : Annotated[Optional[StrictStr], Field(description="filter by work_fragment id")] = None, work_status : Annotated[Optional[conlist(StrictStr)], Field(description="Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> PaginatedAgentTaskFragmentList:  # noqa: E501
        """List Agent Task Fragments  # noqa: E501

        List Agent Task Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_list(agent, agent_task, detection_data, drop_data, end_date, from_location, id, name, ordering, page, page_size, payload_data, pick_data, start_date, status, to_location, type, work, work_fragment, work_status, workflow, async_req=True)
        >>> result = thread.get()

        :param agent: filter by agent id
        :type agent: float
        :param agent_task: filter by agent_task id
        :type agent_task: float
        :param detection_data: filter by detection_data query
        :type detection_data: str
        :param drop_data: filter by drop_data query
        :type drop_data: str
        :param end_date:
        :type end_date: datetime
        :param from_location: filter by from_location query
        :type from_location: str
        :param id:
        :type id: List[int]
        :param name:
        :type name: List[str]
        :param ordering: order the result, default is ID
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param payload_data: filter by payload_data query
        :type payload_data: str
        :param pick_data: filter by pick_data query
        :type pick_data: str
        :param start_date:
        :type start_date: datetime
        :param status: filter by status
        :type status: str
        :param to_location: filter by to_location query
        :type to_location: str
        :param type: filter by type
        :type type: str
        :param work: filter by work id
        :type work: List[str]
        :param work_fragment: filter by work_fragment id
        :type work_fragment: str
        :param work_status: Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed
        :type work_status: List[str]
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedAgentTaskFragmentList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_list_with_http_info(agent, agent_task, detection_data, drop_data, end_date, from_location, id, name, ordering, page, page_size, payload_data, pick_data, start_date, status, to_location, type, work, work_fragment, work_status, workflow, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_list_with_http_info(self, agent : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="filter by agent id")] = None, agent_task : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="filter by agent_task id")] = None, detection_data : Annotated[Optional[StrictStr], Field(description="filter by detection_data query")] = None, drop_data : Annotated[Optional[StrictStr], Field(description="filter by drop_data query")] = None, end_date : Optional[datetime] = None, from_location : Annotated[Optional[StrictStr], Field(description="filter by from_location query")] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[conlist(StrictStr)] = None, ordering : Annotated[Optional[StrictStr], Field(description="order the result, default is ID")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, payload_data : Annotated[Optional[StrictStr], Field(description="filter by payload_data query")] = None, pick_data : Annotated[Optional[StrictStr], Field(description="filter by pick_data query")] = None, start_date : Optional[datetime] = None, status : Annotated[Optional[StrictStr], Field(description="filter by status")] = None, to_location : Annotated[Optional[StrictStr], Field(description="filter by to_location query")] = None, type : Annotated[Optional[StrictStr], Field(description="filter by type")] = None, work : Annotated[Optional[conlist(StrictStr)], Field(description="filter by work id")] = None, work_fragment : Annotated[Optional[StrictStr], Field(description="filter by work_fragment id")] = None, work_status : Annotated[Optional[conlist(StrictStr)], Field(description="Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Agent Task Fragments  # noqa: E501

        List Agent Task Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_list_with_http_info(agent, agent_task, detection_data, drop_data, end_date, from_location, id, name, ordering, page, page_size, payload_data, pick_data, start_date, status, to_location, type, work, work_fragment, work_status, workflow, async_req=True)
        >>> result = thread.get()

        :param agent: filter by agent id
        :type agent: float
        :param agent_task: filter by agent_task id
        :type agent_task: float
        :param detection_data: filter by detection_data query
        :type detection_data: str
        :param drop_data: filter by drop_data query
        :type drop_data: str
        :param end_date:
        :type end_date: datetime
        :param from_location: filter by from_location query
        :type from_location: str
        :param id:
        :type id: List[int]
        :param name:
        :type name: List[str]
        :param ordering: order the result, default is ID
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param payload_data: filter by payload_data query
        :type payload_data: str
        :param pick_data: filter by pick_data query
        :type pick_data: str
        :param start_date:
        :type start_date: datetime
        :param status: filter by status
        :type status: str
        :param to_location: filter by to_location query
        :type to_location: str
        :param type: filter by type
        :type type: str
        :param work: filter by work id
        :type work: List[str]
        :param work_fragment: filter by work_fragment id
        :type work_fragment: str
        :param work_status: Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed
        :type work_status: List[str]
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedAgentTaskFragmentList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'agent',
            'agent_task',
            'detection_data',
            'drop_data',
            'end_date',
            'from_location',
            'id',
            'name',
            'ordering',
            'page',
            'page_size',
            'payload_data',
            'pick_data',
            'start_date',
            'status',
            'to_location',
            'type',
            'work',
            'work_fragment',
            'work_status',
            'workflow'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('agent') is not None:  # noqa: E501
            _query_params.append(('agent', _params['agent']))

        if _params.get('agent_task') is not None:  # noqa: E501
            _query_params.append(('agent_task', _params['agent_task']))

        if _params.get('detection_data') is not None:  # noqa: E501
            _query_params.append(('detection_data', _params['detection_data']))

        if _params.get('drop_data') is not None:  # noqa: E501
            _query_params.append(('drop_data', _params['drop_data']))

        if _params.get('end_date') is not None:  # noqa: E501
            if isinstance(_params['end_date'], datetime):
                _query_params.append(('end_date', _params['end_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end_date', _params['end_date']))

        if _params.get('from_location') is not None:  # noqa: E501
            _query_params.append(('from_location', _params['from_location']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))
            _collection_formats['name'] = 'multi'

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('payload_data') is not None:  # noqa: E501
            _query_params.append(('payload_data', _params['payload_data']))

        if _params.get('pick_data') is not None:  # noqa: E501
            _query_params.append(('pick_data', _params['pick_data']))

        if _params.get('start_date') is not None:  # noqa: E501
            if isinstance(_params['start_date'], datetime):
                _query_params.append(('start_date', _params['start_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start_date', _params['start_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('to_location') is not None:  # noqa: E501
            _query_params.append(('to_location', _params['to_location']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('work') is not None:  # noqa: E501
            _query_params.append(('work', _params['work']))
            _collection_formats['work'] = 'multi'

        if _params.get('work_fragment') is not None:  # noqa: E501
            _query_params.append(('work_fragment', _params['work_fragment']))

        if _params.get('work_status') is not None:  # noqa: E501
            _query_params.append(('work_status', _params['work_status']))
            _collection_formats['work_status'] = 'multi'

        if _params.get('workflow') is not None:  # noqa: E501
            _query_params.append(('workflow', _params['workflow']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedAgentTaskFragmentList",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_partial_update(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], patched_agent_task_fragment_request : Optional[PatchedAgentTaskFragmentRequest] = None, **kwargs) -> AgentTaskFragment:  # noqa: E501
        """Update Agent Task Fragment  # noqa: E501

        Update Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_partial_update(id, patched_agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param patched_agent_task_fragment_request:
        :type patched_agent_task_fragment_request: PatchedAgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_partial_update_with_http_info(id, patched_agent_task_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_partial_update_with_http_info(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], patched_agent_task_fragment_request : Optional[PatchedAgentTaskFragmentRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Agent Task Fragment  # noqa: E501

        Update Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_partial_update_with_http_info(id, patched_agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param patched_agent_task_fragment_request:
        :type patched_agent_task_fragment_request: PatchedAgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'patched_agent_task_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_agent_task_fragment_request'] is not None:
            _body_params = _params['patched_agent_task_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_patch_partial_update(self, patched_agent_task_fragment_request : Optional[PatchedAgentTaskFragmentRequest] = None, **kwargs) -> AgentTaskFragment:  # noqa: E501
        """v2_agent_task_fragments_patch_partial_update  # noqa: E501

        Get Agent Task Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_patch_partial_update(patched_agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param patched_agent_task_fragment_request:
        :type patched_agent_task_fragment_request: PatchedAgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_patch_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_patch_partial_update_with_http_info(patched_agent_task_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_patch_partial_update_with_http_info(self, patched_agent_task_fragment_request : Optional[PatchedAgentTaskFragmentRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v2_agent_task_fragments_patch_partial_update  # noqa: E501

        Get Agent Task Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_patch_partial_update_with_http_info(patched_agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param patched_agent_task_fragment_request:
        :type patched_agent_task_fragment_request: PatchedAgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'patched_agent_task_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_patch_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_agent_task_fragment_request'] is not None:
            _body_params = _params['patched_agent_task_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments/patch', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_retrieve(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], **kwargs) -> AgentTaskFragment:  # noqa: E501
        """Get Agent Task Fragment Detail  # noqa: E501

        Get Agent Task Fragment Detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_retrieve_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_retrieve_with_http_info(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Agent Task Fragment Detail  # noqa: E501

        Get Agent Task Fragment Detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_summary_retrieve(self, agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, agent_task : Optional[conint(strict=True, le=9007199254740991, ge=1)] = None, end_date : Annotated[Optional[StrictStr], Field(description="filter by end date")] = None, group_by : Annotated[Optional[conlist(StrictStr)], Field(description="group by")] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[conlist(StrictStr)] = None, start_date : Annotated[Optional[StrictStr], Field(description="filter by start date")] = None, status : Annotated[Optional[StrictStr], Field(description="Agent Task Fragment status")] = None, type : Annotated[Optional[StrictStr], Field(description="Agent Task Fragment type")] = None, work : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, work_fragment : Optional[StrictInt] = None, work_status : Annotated[Optional[conlist(StrictStr)], Field(description="Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> AgentTaskFragment:  # noqa: E501
        """Get AGENT TASK Fragment Summary  # noqa: E501

        Get AGENT TASK Fragment Summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_summary_retrieve(agent, agent_task, end_date, group_by, id, name, start_date, status, type, work, work_fragment, work_status, workflow, async_req=True)
        >>> result = thread.get()

        :param agent:
        :type agent: List[V1ContainersCreateDescriptorParameterInner]
        :param agent_task:
        :type agent_task: int
        :param end_date: filter by end date
        :type end_date: str
        :param group_by: group by
        :type group_by: List[str]
        :param id:
        :type id: List[int]
        :param name:
        :type name: List[str]
        :param start_date: filter by start date
        :type start_date: str
        :param status: Agent Task Fragment status
        :type status: str
        :param type: Agent Task Fragment type
        :type type: str
        :param work:
        :type work: List[V1ContainersCreateDescriptorParameterInner]
        :param work_fragment:
        :type work_fragment: int
        :param work_status: Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed
        :type work_status: List[str]
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_summary_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_summary_retrieve_with_http_info(agent, agent_task, end_date, group_by, id, name, start_date, status, type, work, work_fragment, work_status, workflow, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_summary_retrieve_with_http_info(self, agent : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, agent_task : Optional[conint(strict=True, le=9007199254740991, ge=1)] = None, end_date : Annotated[Optional[StrictStr], Field(description="filter by end date")] = None, group_by : Annotated[Optional[conlist(StrictStr)], Field(description="group by")] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[conlist(StrictStr)] = None, start_date : Annotated[Optional[StrictStr], Field(description="filter by start date")] = None, status : Annotated[Optional[StrictStr], Field(description="Agent Task Fragment status")] = None, type : Annotated[Optional[StrictStr], Field(description="Agent Task Fragment type")] = None, work : Optional[conlist(V1ContainersCreateDescriptorParameterInner)] = None, work_fragment : Optional[StrictInt] = None, work_status : Annotated[Optional[conlist(StrictStr)], Field(description="Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get AGENT TASK Fragment Summary  # noqa: E501

        Get AGENT TASK Fragment Summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_summary_retrieve_with_http_info(agent, agent_task, end_date, group_by, id, name, start_date, status, type, work, work_fragment, work_status, workflow, async_req=True)
        >>> result = thread.get()

        :param agent:
        :type agent: List[V1ContainersCreateDescriptorParameterInner]
        :param agent_task:
        :type agent_task: int
        :param end_date: filter by end date
        :type end_date: str
        :param group_by: group by
        :type group_by: List[str]
        :param id:
        :type id: List[int]
        :param name:
        :type name: List[str]
        :param start_date: filter by start date
        :type start_date: str
        :param status: Agent Task Fragment status
        :type status: str
        :param type: Agent Task Fragment type
        :type type: str
        :param work:
        :type work: List[V1ContainersCreateDescriptorParameterInner]
        :param work_fragment:
        :type work_fragment: int
        :param work_status: Current status of the Work, this is set by the system via internal API  * `ON_HOLD` - On Hold * `NEW` - New * `LIVE` - Live * `IN_PROGRESS` - In Progress * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `COMPLETED` - Completed * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `ABORTED` - Aborted * `PARTIALLY_COMPLETED` - Partially Completed
        :type work_status: List[str]
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'agent',
            'agent_task',
            'end_date',
            'group_by',
            'id',
            'name',
            'start_date',
            'status',
            'type',
            'work',
            'work_fragment',
            'work_status',
            'workflow'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_summary_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('agent') is not None:  # noqa: E501
            _query_params.append(('agent', _params['agent']))
            _collection_formats['agent'] = 'multi'

        if _params.get('agent_task') is not None:  # noqa: E501
            _query_params.append(('agent_task', _params['agent_task']))

        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('group_by') is not None:  # noqa: E501
            _query_params.append(('group_by', _params['group_by']))
            _collection_formats['group_by'] = 'multi'

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))
            _collection_formats['name'] = 'multi'

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('work') is not None:  # noqa: E501
            _query_params.append(('work', _params['work']))
            _collection_formats['work'] = 'multi'

        if _params.get('work_fragment') is not None:  # noqa: E501
            _query_params.append(('work_fragment', _params['work_fragment']))

        if _params.get('work_status') is not None:  # noqa: E501
            _query_params.append(('work_status', _params['work_status']))
            _collection_formats['work_status'] = 'multi'

        if _params.get('workflow') is not None:  # noqa: E501
            _query_params.append(('workflow', _params['workflow']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments/summary', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v2_agent_task_fragments_update(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], agent_task_fragment_request : AgentTaskFragmentRequest, **kwargs) -> AgentTaskFragment:  # noqa: E501
        """Update Agent Task Fragment  # noqa: E501

        Update Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_update(id, agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param agent_task_fragment_request: (required)
        :type agent_task_fragment_request: AgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AgentTaskFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v2_agent_task_fragments_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v2_agent_task_fragments_update_with_http_info(id, agent_task_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v2_agent_task_fragments_update_with_http_info(self, id : Annotated[conint(strict=True, le=9007199254740991, ge=1), Field(..., description="A unique value identifying this agent task fragment.")], agent_task_fragment_request : AgentTaskFragmentRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Agent Task Fragment  # noqa: E501

        Update Agent Task Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v2_agent_task_fragments_update_with_http_info(id, agent_task_fragment_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique value identifying this agent task fragment. (required)
        :type id: int
        :param agent_task_fragment_request: (required)
        :type agent_task_fragment_request: AgentTaskFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AgentTaskFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'agent_task_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_agent_task_fragments_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['agent_task_fragment_request'] is not None:
            _body_params = _params['agent_task_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AgentTaskFragment",
        }

        return self.api_client.call_api(
            '/v2/agent_task_fragments/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
