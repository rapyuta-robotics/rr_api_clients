# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, conint, constr, validator

class ModelSchema(BaseModel):
    """
    ModelSchema
    """
    id: Optional[conint(strict=True, le=9007199254740991, ge=1)] = Field(None, description="user defined `id` of this object. Must be unique in the site or map (for nodes and edges); Default random 53 bit integer")
    name: Optional[constr(strict=True, max_length=100)] = Field(None, description="user defined `name` of this object. Must be unique in the site or map (for nodes and edges)")
    type: Optional[constr(strict=True, max_length=50)] = Field(None, description="Type of the object (if its a spot, what kind of spot)")
    resource: StrictStr = Field(..., description="Which resource applies this schema (node, edge)  * `site` - Site * `spotannotation` - Spot * `region` - Region * `node` - Node * `edge` - Edge * `map` - Map * `robot` - Robot * `robotdescriptor` - Robot Descriptor * `agent` - Agent * `externaldevice` - External Device * `errortype` - Error Type * `erroraction` - Error Action * `work` - Work * `workpayloadfragment` - Work Payload Fragment * `layer` - Layer * `agenttask` - Agent Task * `agenttaskfragment` - Agent Task Fragment * `container` - Container * `containerdescriptor` - Container Descriptor * `assetlocation` - Asset Location")
    var_schema: Dict[str, Any] = Field(..., alias="schema", description="Schema description for the meta_data using (http://json-schema.org/learn/getting-started-step-by-step)")
    field_name: Optional[constr(strict=True, max_length=50)] = Field(None, description="The field on the given resource that this schema applies to (default: 'meta_data').")
    workflow: Optional[constr(strict=True, max_length=32)] = Field(None, description="Workflow of the object(only for models that have workflow)")
    application_data: Optional[Dict[str, Any]] = Field(None, description="JSON encoded application data for objects of this type")
    __properties = ["id", "name", "type", "resource", "schema", "field_name", "workflow", "application_data"]

    @validator('resource')
    def resource_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('site', 'spotannotation', 'region', 'node', 'edge', 'map', 'robot', 'robotdescriptor', 'agent', 'externaldevice', 'errortype', 'erroraction', 'work', 'workpayloadfragment', 'layer', 'agenttask', 'agenttaskfragment', 'container', 'containerdescriptor', 'assetlocation'):
            raise ValueError("must be one of enum values ('site', 'spotannotation', 'region', 'node', 'edge', 'map', 'robot', 'robotdescriptor', 'agent', 'externaldevice', 'errortype', 'erroraction', 'work', 'workpayloadfragment', 'layer', 'agenttask', 'agenttaskfragment', 'container', 'containerdescriptor', 'assetlocation')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ModelSchema:
        """Create an instance of ModelSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if application_data (nullable) is None
        # and __fields_set__ contains the field
        if self.application_data is None and "application_data" in self.__fields_set__:
            _dict['application_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ModelSchema:
        """Create an instance of ModelSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ModelSchema.parse_obj(obj)

        _obj = ModelSchema.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "resource": obj.get("resource"),
            "var_schema": obj.get("schema"),
            "field_name": obj.get("field_name"),
            "workflow": obj.get("workflow"),
            "application_data": obj.get("application_data")
        })
        return _obj


