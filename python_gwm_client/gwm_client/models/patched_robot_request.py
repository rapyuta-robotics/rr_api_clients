# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: api-client-testing
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, constr, validator

class PatchedRobotRequest(BaseModel):
    """
    PatchedRobotRequest
    """
    id: Optional[conint(strict=True, le=9007199254740991, ge=1)] = Field(None, description="user defined `id` of this object. Must be unique in the site or map (for nodes and edges); Default random 53 bit integer")
    name: Optional[constr(strict=True, max_length=100, min_length=1)] = Field(None, description="Name of the robot")
    io_device_id: Optional[constr(strict=True, max_length=50)] = None
    io_project_id: Optional[constr(strict=True, max_length=50)] = None
    labels: Optional[Dict[str, constr(strict=True, min_length=1)]] = None
    robot_descriptor: Optional[StrictInt] = Field(None, description="`id` of relevant related element eg: agent,map,site,spot,node,edge,external_device")
    ip_address: Optional[constr(strict=True, min_length=1)] = Field(None, description="IP address of the robot ")
    current_mode: Optional[StrictStr] = Field(None, description="The current state of the robot   * `MAPPING` - Mapping * `NORMAL` - Normal")
    requested_mode: Optional[StrictStr] = Field(None, description="The requested state of the robot  * `MAPPING` - Mapping * `NORMAL` - Normal")
    meta_data: Optional[Dict[str, Any]] = Field(None, description="optional JSON encoded metadata for this object")
    __properties = ["id", "name", "io_device_id", "io_project_id", "labels", "robot_descriptor", "ip_address", "current_mode", "requested_mode", "meta_data"]

    @validator('current_mode')
    def current_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MAPPING', 'NORMAL'):
            raise ValueError("must be one of enum values ('MAPPING', 'NORMAL')")
        return value

    @validator('requested_mode')
    def requested_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MAPPING', 'NORMAL'):
            raise ValueError("must be one of enum values ('MAPPING', 'NORMAL')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedRobotRequest:
        """Create an instance of PatchedRobotRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if ip_address (nullable) is None
        # and __fields_set__ contains the field
        if self.ip_address is None and "ip_address" in self.__fields_set__:
            _dict['ip_address'] = None

        # set to None if meta_data (nullable) is None
        # and __fields_set__ contains the field
        if self.meta_data is None and "meta_data" in self.__fields_set__:
            _dict['meta_data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedRobotRequest:
        """Create an instance of PatchedRobotRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedRobotRequest.parse_obj(obj)

        _obj = PatchedRobotRequest.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "io_device_id": obj.get("io_device_id"),
            "io_project_id": obj.get("io_project_id"),
            "labels": obj.get("labels"),
            "robot_descriptor": obj.get("robot_descriptor"),
            "ip_address": obj.get("ip_address"),
            "current_mode": obj.get("current_mode"),
            "requested_mode": obj.get("requested_mode"),
            "meta_data": obj.get("meta_data")
        })
        return _obj


