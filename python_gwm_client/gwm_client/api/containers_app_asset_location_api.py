# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: api-client-testing
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from gwm_client.models.asset_location import AssetLocation
from gwm_client.models.asset_location_request import AssetLocationRequest
from gwm_client.models.paginated_asset_location_list import PaginatedAssetLocationList
from gwm_client.models.patched_asset_location_patch_request import PatchedAssetLocationPatchRequest
from gwm_client.models.patched_asset_location_request import PatchedAssetLocationRequest

from gwm_client.api_client import ApiClient
from gwm_client.api_response import ApiResponse
from gwm_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ContainersAppAssetLocationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v1_asset_locations_bulk_patch_update_partial_update(self, patched_asset_location_patch_request : conlist(PatchedAssetLocationPatchRequest), **kwargs) -> None:  # noqa: E501
        """Patch asset locations  # noqa: E501

        Patch asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_bulk_patch_update_partial_update(patched_asset_location_patch_request, async_req=True)
        >>> result = thread.get()

        :param patched_asset_location_patch_request: (required)
        :type patched_asset_location_patch_request: List[PatchedAssetLocationPatchRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_bulk_patch_update_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_bulk_patch_update_partial_update_with_http_info(patched_asset_location_patch_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_bulk_patch_update_partial_update_with_http_info(self, patched_asset_location_patch_request : conlist(PatchedAssetLocationPatchRequest), **kwargs) -> ApiResponse:  # noqa: E501
        """Patch asset locations  # noqa: E501

        Patch asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_bulk_patch_update_partial_update_with_http_info(patched_asset_location_patch_request, async_req=True)
        >>> result = thread.get()

        :param patched_asset_location_patch_request: (required)
        :type patched_asset_location_patch_request: List[PatchedAssetLocationPatchRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'patched_asset_location_patch_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_bulk_patch_update_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_asset_location_patch_request'] is not None:
            _body_params = _params['patched_asset_location_patch_request']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/asset_locations/bulk_patch_update', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_create(self, asset_location_request : conlist(AssetLocationRequest), container : Optional[conlist(StrictInt)] = None, id : Optional[conlist(StrictInt)] = None, intersects_region : Optional[StrictStr] = None, map : Optional[StrictInt] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, position : Annotated[Optional[conlist(StrictStr)], Field(description="format: x,y,floor")] = None, spot : Optional[conlist(StrictInt)] = None, type : Optional[conlist(StrictStr)] = None, **kwargs) -> PaginatedAssetLocationList:  # noqa: E501
        """Create asset locations  # noqa: E501

        Create asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_create(asset_location_request, container, id, intersects_region, map, page, page_size, position, spot, type, async_req=True)
        >>> result = thread.get()

        :param asset_location_request: (required)
        :type asset_location_request: List[AssetLocationRequest]
        :param container:
        :type container: List[int]
        :param id:
        :type id: List[int]
        :param intersects_region:
        :type intersects_region: str
        :param map:
        :type map: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param position: format: x,y,floor
        :type position: List[str]
        :param spot:
        :type spot: List[int]
        :param type:
        :type type: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedAssetLocationList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_create_with_http_info(asset_location_request, container, id, intersects_region, map, page, page_size, position, spot, type, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_create_with_http_info(self, asset_location_request : conlist(AssetLocationRequest), container : Optional[conlist(StrictInt)] = None, id : Optional[conlist(StrictInt)] = None, intersects_region : Optional[StrictStr] = None, map : Optional[StrictInt] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, position : Annotated[Optional[conlist(StrictStr)], Field(description="format: x,y,floor")] = None, spot : Optional[conlist(StrictInt)] = None, type : Optional[conlist(StrictStr)] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create asset locations  # noqa: E501

        Create asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_create_with_http_info(asset_location_request, container, id, intersects_region, map, page, page_size, position, spot, type, async_req=True)
        >>> result = thread.get()

        :param asset_location_request: (required)
        :type asset_location_request: List[AssetLocationRequest]
        :param container:
        :type container: List[int]
        :param id:
        :type id: List[int]
        :param intersects_region:
        :type intersects_region: str
        :param map:
        :type map: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param position: format: x,y,floor
        :type position: List[str]
        :param spot:
        :type spot: List[int]
        :param type:
        :type type: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedAssetLocationList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'asset_location_request',
            'container',
            'id',
            'intersects_region',
            'map',
            'page',
            'page_size',
            'position',
            'spot',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('container') is not None:  # noqa: E501
            _query_params.append(('container', _params['container']))
            _collection_formats['container'] = 'multi'

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('intersects_region') is not None:  # noqa: E501
            _query_params.append(('intersects_region', _params['intersects_region']))

        if _params.get('map') is not None:  # noqa: E501
            _query_params.append(('map', _params['map']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('position') is not None:  # noqa: E501
            _query_params.append(('position', _params['position']))
            _collection_formats['position'] = 'csv'

        if _params.get('spot') is not None:  # noqa: E501
            _query_params.append(('spot', _params['spot']))
            _collection_formats['spot'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_location_request'] is not None:
            _body_params = _params['asset_location_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "PaginatedAssetLocationList",
        }

        return self.api_client.call_api(
            '/v1/asset_locations', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_delete_destroy(self, container : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'Container IDs'")] = None, id : Annotated[Optional[conlist(StrictInt)], Field(description="List of AssetLocation IDs")] = None, intersects_region : Annotated[Optional[StrictInt], Field(description="'Region ID' or 'Region name")] = None, map : Annotated[Optional[StrictInt], Field(description="map of associated spot")] = None, position : Annotated[Optional[StrictStr], Field(description="x,y coordinate of associated spot")] = None, spot : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'SpotAnnotation IDs'")] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="type of asset location")] = None, **kwargs) -> None:  # noqa: E501
        """Bulk Delete asset locations  # noqa: E501

        Bulk Delete asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_delete_destroy(container, id, intersects_region, map, position, spot, type, async_req=True)
        >>> result = thread.get()

        :param container: List of 'Container IDs'
        :type container: List[int]
        :param id: List of AssetLocation IDs
        :type id: List[int]
        :param intersects_region: 'Region ID' or 'Region name
        :type intersects_region: int
        :param map: map of associated spot
        :type map: int
        :param position: x,y coordinate of associated spot
        :type position: str
        :param spot: List of 'SpotAnnotation IDs'
        :type spot: List[int]
        :param type: type of asset location
        :type type: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_delete_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_delete_destroy_with_http_info(container, id, intersects_region, map, position, spot, type, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_delete_destroy_with_http_info(self, container : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'Container IDs'")] = None, id : Annotated[Optional[conlist(StrictInt)], Field(description="List of AssetLocation IDs")] = None, intersects_region : Annotated[Optional[StrictInt], Field(description="'Region ID' or 'Region name")] = None, map : Annotated[Optional[StrictInt], Field(description="map of associated spot")] = None, position : Annotated[Optional[StrictStr], Field(description="x,y coordinate of associated spot")] = None, spot : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'SpotAnnotation IDs'")] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="type of asset location")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk Delete asset locations  # noqa: E501

        Bulk Delete asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_delete_destroy_with_http_info(container, id, intersects_region, map, position, spot, type, async_req=True)
        >>> result = thread.get()

        :param container: List of 'Container IDs'
        :type container: List[int]
        :param id: List of AssetLocation IDs
        :type id: List[int]
        :param intersects_region: 'Region ID' or 'Region name
        :type intersects_region: int
        :param map: map of associated spot
        :type map: int
        :param position: x,y coordinate of associated spot
        :type position: str
        :param spot: List of 'SpotAnnotation IDs'
        :type spot: List[int]
        :param type: type of asset location
        :type type: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'container',
            'id',
            'intersects_region',
            'map',
            'position',
            'spot',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_delete_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('container') is not None:  # noqa: E501
            _query_params.append(('container', _params['container']))
            _collection_formats['container'] = 'multi'

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('intersects_region') is not None:  # noqa: E501
            _query_params.append(('intersects_region', _params['intersects_region']))

        if _params.get('map') is not None:  # noqa: E501
            _query_params.append(('map', _params['map']))

        if _params.get('position') is not None:  # noqa: E501
            _query_params.append(('position', _params['position']))

        if _params.get('spot') is not None:  # noqa: E501
            _query_params.append(('spot', _params['spot']))
            _collection_formats['spot'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/asset_locations/delete', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_destroy(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], **kwargs) -> None:  # noqa: E501
        """v1_asset_locations_destroy  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_destroy(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_destroy_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_destroy_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_destroy_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], **kwargs) -> ApiResponse:  # noqa: E501
        """v1_asset_locations_destroy  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_destroy_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_destroy" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/asset_locations/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_list(self, container : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'Container IDs'")] = None, id : Annotated[Optional[conlist(StrictInt)], Field(description="List of AssetLocation IDs")] = None, intersects_region : Annotated[Optional[StrictInt], Field(description="'Region ID' or 'Region name")] = None, map : Annotated[Optional[StrictInt], Field(description="map of associated spot")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, position : Annotated[Optional[StrictStr], Field(description="x,y coordinate of associated spot")] = None, spot : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'SpotAnnotation IDs'")] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="type of asset location")] = None, **kwargs) -> PaginatedAssetLocationList:  # noqa: E501
        """List asset locations  # noqa: E501

        List asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_list(container, id, intersects_region, map, page, page_size, position, spot, type, async_req=True)
        >>> result = thread.get()

        :param container: List of 'Container IDs'
        :type container: List[int]
        :param id: List of AssetLocation IDs
        :type id: List[int]
        :param intersects_region: 'Region ID' or 'Region name
        :type intersects_region: int
        :param map: map of associated spot
        :type map: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param position: x,y coordinate of associated spot
        :type position: str
        :param spot: List of 'SpotAnnotation IDs'
        :type spot: List[int]
        :param type: type of asset location
        :type type: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedAssetLocationList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_list_with_http_info(container, id, intersects_region, map, page, page_size, position, spot, type, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_list_with_http_info(self, container : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'Container IDs'")] = None, id : Annotated[Optional[conlist(StrictInt)], Field(description="List of AssetLocation IDs")] = None, intersects_region : Annotated[Optional[StrictInt], Field(description="'Region ID' or 'Region name")] = None, map : Annotated[Optional[StrictInt], Field(description="map of associated spot")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, position : Annotated[Optional[StrictStr], Field(description="x,y coordinate of associated spot")] = None, spot : Annotated[Optional[conlist(StrictInt)], Field(description="List of 'SpotAnnotation IDs'")] = None, type : Annotated[Optional[conlist(StrictStr)], Field(description="type of asset location")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List asset locations  # noqa: E501

        List asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_list_with_http_info(container, id, intersects_region, map, page, page_size, position, spot, type, async_req=True)
        >>> result = thread.get()

        :param container: List of 'Container IDs'
        :type container: List[int]
        :param id: List of AssetLocation IDs
        :type id: List[int]
        :param intersects_region: 'Region ID' or 'Region name
        :type intersects_region: int
        :param map: map of associated spot
        :type map: int
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param position: x,y coordinate of associated spot
        :type position: str
        :param spot: List of 'SpotAnnotation IDs'
        :type spot: List[int]
        :param type: type of asset location
        :type type: List[str]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedAssetLocationList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'container',
            'id',
            'intersects_region',
            'map',
            'page',
            'page_size',
            'position',
            'spot',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('container') is not None:  # noqa: E501
            _query_params.append(('container', _params['container']))
            _collection_formats['container'] = 'multi'

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('intersects_region') is not None:  # noqa: E501
            _query_params.append(('intersects_region', _params['intersects_region']))

        if _params.get('map') is not None:  # noqa: E501
            _query_params.append(('map', _params['map']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('position') is not None:  # noqa: E501
            _query_params.append(('position', _params['position']))

        if _params.get('spot') is not None:  # noqa: E501
            _query_params.append(('spot', _params['spot']))
            _collection_formats['spot'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))
            _collection_formats['type'] = 'multi'

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedAssetLocationList",
        }

        return self.api_client.call_api(
            '/v1/asset_locations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], patched_asset_location_request : Optional[PatchedAssetLocationRequest] = None, **kwargs) -> AssetLocation:  # noqa: E501
        """v1_asset_locations_partial_update  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_partial_update(id, patched_asset_location_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param patched_asset_location_request:
        :type patched_asset_location_request: PatchedAssetLocationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetLocation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_partial_update_with_http_info(id, patched_asset_location_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], patched_asset_location_request : Optional[PatchedAssetLocationRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_asset_locations_partial_update  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_partial_update_with_http_info(id, patched_asset_location_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param patched_asset_location_request:
        :type patched_asset_location_request: PatchedAssetLocationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetLocation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'patched_asset_location_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_asset_location_request'] is not None:
            _body_params = _params['patched_asset_location_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AssetLocation",
        }

        return self.api_client.call_api(
            '/v1/asset_locations/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_retrieve(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], **kwargs) -> AssetLocation:  # noqa: E501
        """v1_asset_locations_retrieve  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetLocation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_retrieve_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_retrieve_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], **kwargs) -> ApiResponse:  # noqa: E501
        """v1_asset_locations_retrieve  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetLocation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AssetLocation",
        }

        return self.api_client.call_api(
            '/v1/asset_locations/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v1_asset_locations_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], asset_location_request : AssetLocationRequest, **kwargs) -> AssetLocation:  # noqa: E501
        """v1_asset_locations_update  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_update(id, asset_location_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param asset_location_request: (required)
        :type asset_location_request: AssetLocationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetLocation
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v1_asset_locations_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v1_asset_locations_update_with_http_info(id, asset_location_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v1_asset_locations_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this asset location.")], asset_location_request : AssetLocationRequest, **kwargs) -> ApiResponse:  # noqa: E501
        """v1_asset_locations_update  # noqa: E501

        Manage asset locations  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v1_asset_locations_update_with_http_info(id, asset_location_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this asset location. (required)
        :type id: int
        :param asset_location_request: (required)
        :type asset_location_request: AssetLocationRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetLocation, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'asset_location_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_asset_locations_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_location_request'] is not None:
            _body_params = _params['asset_location_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "AssetLocation",
        }

        return self.api_client.call_api(
            '/v1/asset_locations/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
