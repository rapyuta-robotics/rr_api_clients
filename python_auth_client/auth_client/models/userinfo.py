# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr

class Userinfo(BaseModel):
    """
    Userinfo
    """
    sub: StrictStr = Field(...)
    preferred_username: StrictStr = Field(...)
    name: StrictStr = Field(...)
    group: StrictStr = Field(...)
    group_name: StrictStr = Field(...)
    expiry: StrictStr = Field(...)
    scope: StrictStr = Field(...)
    picture: StrictStr = Field(...)
    __properties = ["sub", "preferred_username", "name", "group", "group_name", "expiry", "scope", "picture"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Userinfo:
        """Create an instance of Userinfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Userinfo:
        """Create an instance of Userinfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Userinfo.parse_obj(obj)

        _obj = Userinfo.parse_obj({
            "sub": obj.get("sub"),
            "preferred_username": obj.get("preferred_username"),
            "name": obj.get("name"),
            "group": obj.get("group"),
            "group_name": obj.get("group_name"),
            "expiry": obj.get("expiry"),
            "scope": obj.get("scope"),
            "picture": obj.get("picture")
        })
        return _obj


