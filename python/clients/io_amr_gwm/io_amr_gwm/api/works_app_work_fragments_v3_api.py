# coding: utf-8

"""
    IO-AMR GWM API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: devel
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, conint, conlist, validator

from typing import List, Optional, Union

from io_amr_gwm.models.paginated_v3_work_fragment_list import PaginatedV3WorkFragmentList
from io_amr_gwm.models.patched_v3_work_fragment_request import PatchedV3WorkFragmentRequest
from io_amr_gwm.models.v3_work_fragment import V3WorkFragment
from io_amr_gwm.models.v3_work_fragment_bulk_update_request import V3WorkFragmentBulkUpdateRequest
from io_amr_gwm.models.v3_work_fragment_request import V3WorkFragmentRequest

from io_amr_gwm.api_client import ApiClient
from io_amr_gwm.api_response import ApiResponse
from io_amr_gwm.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class WorksAppWorkFragmentsV3Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def v3_fragments_bulk_internal_update(self, v3_work_fragment_bulk_update_request : conlist(V3WorkFragmentBulkUpdateRequest), **kwargs) -> V3WorkFragment:  # noqa: E501
        """Bulk Internal Update Fragments  # noqa: E501

        Bulk Internal Update Fragnments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_bulk_internal_update(v3_work_fragment_bulk_update_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_fragment_bulk_update_request: (required)
        :type v3_work_fragment_bulk_update_request: List[V3WorkFragmentBulkUpdateRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3WorkFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_bulk_internal_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_bulk_internal_update_with_http_info(v3_work_fragment_bulk_update_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_bulk_internal_update_with_http_info(self, v3_work_fragment_bulk_update_request : conlist(V3WorkFragmentBulkUpdateRequest), **kwargs) -> ApiResponse:  # noqa: E501
        """Bulk Internal Update Fragments  # noqa: E501

        Bulk Internal Update Fragnments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_bulk_internal_update_with_http_info(v3_work_fragment_bulk_update_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_fragment_bulk_update_request: (required)
        :type v3_work_fragment_bulk_update_request: List[V3WorkFragmentBulkUpdateRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3WorkFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'v3_work_fragment_bulk_update_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_bulk_internal_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['v3_work_fragment_bulk_update_request'] is not None:
            _body_params = _params['v3_work_fragment_bulk_update_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3WorkFragment",
        }

        return self.api_client.call_api(
            '/v3/fragments/internal_update', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_fragments_count_retrieve(self, end_date : Optional[datetime] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, parent : Optional[conlist(StrictInt)] = None, quantity_requested_max : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, quantity_requested_min : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, rejection_reason : Optional[StrictStr] = None, start_date : Optional[datetime] = None, status : Annotated[Optional[conlist(StrictStr)], Field(description="Status  * `NOT_STARTED` - Not Started * `IN_PROGRESS` - In Progress * `COMPLETED` - Completed * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `SKIPPED` - Skipped * `PARTIALLY_COMPLETED` - Partially Completed")] = None, type : Annotated[Optional[StrictStr], Field(description="* `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move")] = None, **kwargs) -> int:  # noqa: E501
        """v3_fragments_count_retrieve  # noqa: E501

        Get Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_count_retrieve(end_date, id, name, ordering, parent, quantity_requested_max, quantity_requested_min, rejection_reason, start_date, status, type, async_req=True)
        >>> result = thread.get()

        :param end_date:
        :type end_date: datetime
        :param id:
        :type id: List[int]
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param parent:
        :type parent: List[int]
        :param quantity_requested_max: How many was requested by the order
        :type quantity_requested_max: int
        :param quantity_requested_min: How many was requested by the order
        :type quantity_requested_min: int
        :param rejection_reason:
        :type rejection_reason: str
        :param start_date:
        :type start_date: datetime
        :param status: Status  * `NOT_STARTED` - Not Started * `IN_PROGRESS` - In Progress * `COMPLETED` - Completed * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `SKIPPED` - Skipped * `PARTIALLY_COMPLETED` - Partially Completed
        :type status: List[str]
        :param type: * `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move
        :type type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: int
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_count_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_count_retrieve_with_http_info(end_date, id, name, ordering, parent, quantity_requested_max, quantity_requested_min, rejection_reason, start_date, status, type, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_count_retrieve_with_http_info(self, end_date : Optional[datetime] = None, id : Optional[conlist(StrictInt)] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, parent : Optional[conlist(StrictInt)] = None, quantity_requested_max : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, quantity_requested_min : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, rejection_reason : Optional[StrictStr] = None, start_date : Optional[datetime] = None, status : Annotated[Optional[conlist(StrictStr)], Field(description="Status  * `NOT_STARTED` - Not Started * `IN_PROGRESS` - In Progress * `COMPLETED` - Completed * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `SKIPPED` - Skipped * `PARTIALLY_COMPLETED` - Partially Completed")] = None, type : Annotated[Optional[StrictStr], Field(description="* `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v3_fragments_count_retrieve  # noqa: E501

        Get Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_count_retrieve_with_http_info(end_date, id, name, ordering, parent, quantity_requested_max, quantity_requested_min, rejection_reason, start_date, status, type, async_req=True)
        >>> result = thread.get()

        :param end_date:
        :type end_date: datetime
        :param id:
        :type id: List[int]
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param parent:
        :type parent: List[int]
        :param quantity_requested_max: How many was requested by the order
        :type quantity_requested_max: int
        :param quantity_requested_min: How many was requested by the order
        :type quantity_requested_min: int
        :param rejection_reason:
        :type rejection_reason: str
        :param start_date:
        :type start_date: datetime
        :param status: Status  * `NOT_STARTED` - Not Started * `IN_PROGRESS` - In Progress * `COMPLETED` - Completed * `REJECTED` - Rejected * `CANCELLED` - Cancelled * `TERMINAL_WITH_EXCEPTION` - Terminal With Exception * `SKIPPED` - Skipped * `PARTIALLY_COMPLETED` - Partially Completed
        :type status: List[str]
        :param type: * `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move
        :type type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'end_date',
            'id',
            'name',
            'ordering',
            'parent',
            'quantity_requested_max',
            'quantity_requested_min',
            'rejection_reason',
            'start_date',
            'status',
            'type'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_count_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('end_date') is not None:  # noqa: E501
            if isinstance(_params['end_date'], datetime):
                _query_params.append(('end_date', _params['end_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end_date', _params['end_date']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('parent') is not None:  # noqa: E501
            _query_params.append(('parent', _params['parent']))
            _collection_formats['parent'] = 'multi'

        if _params.get('quantity_requested_max') is not None:  # noqa: E501
            _query_params.append(('quantity_requested_max', _params['quantity_requested_max']))

        if _params.get('quantity_requested_min') is not None:  # noqa: E501
            _query_params.append(('quantity_requested_min', _params['quantity_requested_min']))

        if _params.get('rejection_reason') is not None:  # noqa: E501
            _query_params.append(('rejection_reason', _params['rejection_reason']))

        if _params.get('start_date') is not None:  # noqa: E501
            if isinstance(_params['start_date'], datetime):
                _query_params.append(('start_date', _params['start_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start_date', _params['start_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))
            _collection_formats['status'] = 'multi'

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "int",
        }

        return self.api_client.call_api(
            '/v3/fragments/count', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_fragments_create(self, v3_work_fragment_request : conlist(V3WorkFragmentRequest), **kwargs) -> List[V3WorkFragment]:  # noqa: E501
        """Create  Fragments  # noqa: E501

        Create Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_create(v3_work_fragment_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_fragment_request: (required)
        :type v3_work_fragment_request: List[V3WorkFragmentRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[V3WorkFragment]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_create_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_create_with_http_info(v3_work_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_create_with_http_info(self, v3_work_fragment_request : conlist(V3WorkFragmentRequest), **kwargs) -> ApiResponse:  # noqa: E501
        """Create  Fragments  # noqa: E501

        Create Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_create_with_http_info(v3_work_fragment_request, async_req=True)
        >>> result = thread.get()

        :param v3_work_fragment_request: (required)
        :type v3_work_fragment_request: List[V3WorkFragmentRequest]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[V3WorkFragment], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'v3_work_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_create" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['v3_work_fragment_request'] is not None:
            _body_params = _params['v3_work_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '201': "List[V3WorkFragment]",
        }

        return self.api_client.call_api(
            '/v3/fragments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_fragments_internal_update_partial_update(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work payload fragment.")], patched_v3_work_fragment_request : Optional[PatchedV3WorkFragmentRequest] = None, **kwargs) -> V3WorkFragment:  # noqa: E501
        """Internal Update Fragment  # noqa: E501

        Internal Update Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_internal_update_partial_update(id, patched_v3_work_fragment_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work payload fragment. (required)
        :type id: int
        :param patched_v3_work_fragment_request:
        :type patched_v3_work_fragment_request: PatchedV3WorkFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3WorkFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_internal_update_partial_update_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_internal_update_partial_update_with_http_info(id, patched_v3_work_fragment_request, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_internal_update_partial_update_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work payload fragment.")], patched_v3_work_fragment_request : Optional[PatchedV3WorkFragmentRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Internal Update Fragment  # noqa: E501

        Internal Update Fragment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_internal_update_partial_update_with_http_info(id, patched_v3_work_fragment_request, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work payload fragment. (required)
        :type id: int
        :param patched_v3_work_fragment_request:
        :type patched_v3_work_fragment_request: PatchedV3WorkFragmentRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3WorkFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'patched_v3_work_fragment_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_internal_update_partial_update" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patched_v3_work_fragment_request'] is not None:
            _body_params = _params['patched_v3_work_fragment_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3WorkFragment",
        }

        return self.api_client.call_api(
            '/v3/fragments/{id}/internal_update', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_fragments_list(self, application_data : Annotated[Optional[StrictStr], Field(description="filter by application_data query")] = None, end_date : Optional[datetime] = None, id : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter fragments by id")] = None, meta_data : Annotated[Optional[StrictStr], Field(description="filter by meta_data query")] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, parent : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter fragments by parent work")] = None, parent__application_data : Annotated[Optional[StrictStr], Field(description="filter by parent__application_data query")] = None, parent__meta_data : Annotated[Optional[StrictStr], Field(description="filter by parent__meta_data query")] = None, quantity_requested_max : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, quantity_requested_min : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, rejection_reason : Optional[StrictStr] = None, start_date : Optional[datetime] = None, status : Annotated[Optional[StrictStr], Field(description="filter by work fragment status")] = None, type : Annotated[Optional[StrictStr], Field(description="* `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move")] = None, with_task_fragments : Annotated[Optional[StrictBool], Field(description="filter fragments by parent work")] = None, **kwargs) -> PaginatedV3WorkFragmentList:  # noqa: E501
        """v3_fragments_list  # noqa: E501

        List Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_list(application_data, end_date, id, meta_data, name, ordering, page, page_size, parent, parent__application_data, parent__meta_data, quantity_requested_max, quantity_requested_min, rejection_reason, start_date, status, type, with_task_fragments, async_req=True)
        >>> result = thread.get()

        :param application_data: filter by application_data query
        :type application_data: str
        :param end_date:
        :type end_date: datetime
        :param id: filter fragments by id
        :type id: List[float]
        :param meta_data: filter by meta_data query
        :type meta_data: str
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param parent: filter fragments by parent work
        :type parent: List[float]
        :param parent__application_data: filter by parent__application_data query
        :type parent__application_data: str
        :param parent__meta_data: filter by parent__meta_data query
        :type parent__meta_data: str
        :param quantity_requested_max: How many was requested by the order
        :type quantity_requested_max: int
        :param quantity_requested_min: How many was requested by the order
        :type quantity_requested_min: int
        :param rejection_reason:
        :type rejection_reason: str
        :param start_date:
        :type start_date: datetime
        :param status: filter by work fragment status
        :type status: str
        :param type: * `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move
        :type type: str
        :param with_task_fragments: filter fragments by parent work
        :type with_task_fragments: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedV3WorkFragmentList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_list_with_http_info(application_data, end_date, id, meta_data, name, ordering, page, page_size, parent, parent__application_data, parent__meta_data, quantity_requested_max, quantity_requested_min, rejection_reason, start_date, status, type, with_task_fragments, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_list_with_http_info(self, application_data : Annotated[Optional[StrictStr], Field(description="filter by application_data query")] = None, end_date : Optional[datetime] = None, id : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter fragments by id")] = None, meta_data : Annotated[Optional[StrictStr], Field(description="filter by meta_data query")] = None, name : Optional[StrictStr] = None, ordering : Annotated[Optional[StrictStr], Field(description="Which field to use when ordering the results.")] = None, page : Annotated[Optional[StrictInt], Field(description="A page number within the paginated result set.")] = None, page_size : Annotated[Optional[StrictInt], Field(description="Number of results to return per page.")] = None, parent : Annotated[Optional[conlist(Union[StrictFloat, StrictInt])], Field(description="filter fragments by parent work")] = None, parent__application_data : Annotated[Optional[StrictStr], Field(description="filter by parent__application_data query")] = None, parent__meta_data : Annotated[Optional[StrictStr], Field(description="filter by parent__meta_data query")] = None, quantity_requested_max : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, quantity_requested_min : Annotated[Optional[conint(strict=True, le=2147483647, ge=0)], Field(description="How many was requested by the order")] = None, rejection_reason : Optional[StrictStr] = None, start_date : Optional[datetime] = None, status : Annotated[Optional[StrictStr], Field(description="filter by work fragment status")] = None, type : Annotated[Optional[StrictStr], Field(description="* `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move")] = None, with_task_fragments : Annotated[Optional[StrictBool], Field(description="filter fragments by parent work")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """v3_fragments_list  # noqa: E501

        List Fragments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_list_with_http_info(application_data, end_date, id, meta_data, name, ordering, page, page_size, parent, parent__application_data, parent__meta_data, quantity_requested_max, quantity_requested_min, rejection_reason, start_date, status, type, with_task_fragments, async_req=True)
        >>> result = thread.get()

        :param application_data: filter by application_data query
        :type application_data: str
        :param end_date:
        :type end_date: datetime
        :param id: filter fragments by id
        :type id: List[float]
        :param meta_data: filter by meta_data query
        :type meta_data: str
        :param name:
        :type name: str
        :param ordering: Which field to use when ordering the results.
        :type ordering: str
        :param page: A page number within the paginated result set.
        :type page: int
        :param page_size: Number of results to return per page.
        :type page_size: int
        :param parent: filter fragments by parent work
        :type parent: List[float]
        :param parent__application_data: filter by parent__application_data query
        :type parent__application_data: str
        :param parent__meta_data: filter by parent__meta_data query
        :type parent__meta_data: str
        :param quantity_requested_max: How many was requested by the order
        :type quantity_requested_max: int
        :param quantity_requested_min: How many was requested by the order
        :type quantity_requested_min: int
        :param rejection_reason:
        :type rejection_reason: str
        :param start_date:
        :type start_date: datetime
        :param status: filter by work fragment status
        :type status: str
        :param type: * `ITEM_MOVE` - Item Move * `CONTAINER_MOVE` - Container Move
        :type type: str
        :param with_task_fragments: filter fragments by parent work
        :type with_task_fragments: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedV3WorkFragmentList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'application_data',
            'end_date',
            'id',
            'meta_data',
            'name',
            'ordering',
            'page',
            'page_size',
            'parent',
            'parent__application_data',
            'parent__meta_data',
            'quantity_requested_max',
            'quantity_requested_min',
            'rejection_reason',
            'start_date',
            'status',
            'type',
            'with_task_fragments'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_list" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('application_data') is not None:  # noqa: E501
            _query_params.append(('application_data', _params['application_data']))

        if _params.get('end_date') is not None:  # noqa: E501
            if isinstance(_params['end_date'], datetime):
                _query_params.append(('end_date', _params['end_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('end_date', _params['end_date']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))
            _collection_formats['id'] = 'multi'

        if _params.get('meta_data') is not None:  # noqa: E501
            _query_params.append(('meta_data', _params['meta_data']))

        if _params.get('name') is not None:  # noqa: E501
            _query_params.append(('name', _params['name']))

        if _params.get('ordering') is not None:  # noqa: E501
            _query_params.append(('ordering', _params['ordering']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('page_size', _params['page_size']))

        if _params.get('parent') is not None:  # noqa: E501
            _query_params.append(('parent', _params['parent']))
            _collection_formats['parent'] = 'multi'

        if _params.get('parent__application_data') is not None:  # noqa: E501
            _query_params.append(('parent__application_data', _params['parent__application_data']))

        if _params.get('parent__meta_data') is not None:  # noqa: E501
            _query_params.append(('parent__meta_data', _params['parent__meta_data']))

        if _params.get('quantity_requested_max') is not None:  # noqa: E501
            _query_params.append(('quantity_requested_max', _params['quantity_requested_max']))

        if _params.get('quantity_requested_min') is not None:  # noqa: E501
            _query_params.append(('quantity_requested_min', _params['quantity_requested_min']))

        if _params.get('rejection_reason') is not None:  # noqa: E501
            _query_params.append(('rejection_reason', _params['rejection_reason']))

        if _params.get('start_date') is not None:  # noqa: E501
            if isinstance(_params['start_date'], datetime):
                _query_params.append(('start_date', _params['start_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('start_date', _params['start_date']))

        if _params.get('status') is not None:  # noqa: E501
            _query_params.append(('status', _params['status']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type']))

        if _params.get('with_task_fragments') is not None:  # noqa: E501
            _query_params.append(('with_task_fragments', _params['with_task_fragments']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "PaginatedV3WorkFragmentList",
        }

        return self.api_client.call_api(
            '/v3/fragments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_fragments_retrieve(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work payload fragment.")], **kwargs) -> V3WorkFragment:  # noqa: E501
        """v3_fragments_retrieve  # noqa: E501

        Get Fragment Detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_retrieve(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work payload fragment. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3WorkFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_retrieve_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_retrieve_with_http_info(self, id : Annotated[StrictInt, Field(..., description="A unique integer value identifying this work payload fragment.")], **kwargs) -> ApiResponse:  # noqa: E501
        """v3_fragments_retrieve  # noqa: E501

        Get Fragment Detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_retrieve_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: A unique integer value identifying this work payload fragment. (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3WorkFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3WorkFragment",
        }

        return self.api_client.call_api(
            '/v3/fragments/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def v3_fragments_summary_retrieve(self, end_date : Annotated[Optional[StrictStr], Field(description="filter by end date")] = None, group_by : Annotated[Optional[conlist(StrictStr)], Field(description="group by")] = None, interval : Annotated[Optional[StrictStr], Field(description="interval")] = None, start_date : Annotated[Optional[StrictStr], Field(description="filter by start date")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> V3WorkFragment:  # noqa: E501
        """Get Fragment Summary  # noqa: E501

        Get Fragment Summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_summary_retrieve(end_date, group_by, interval, start_date, workflow, async_req=True)
        >>> result = thread.get()

        :param end_date: filter by end date
        :type end_date: str
        :param group_by: group by
        :type group_by: List[str]
        :param interval: interval
        :type interval: str
        :param start_date: filter by start date
        :type start_date: str
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: V3WorkFragment
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the v3_fragments_summary_retrieve_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.v3_fragments_summary_retrieve_with_http_info(end_date, group_by, interval, start_date, workflow, **kwargs)  # noqa: E501

    @validate_arguments
    def v3_fragments_summary_retrieve_with_http_info(self, end_date : Annotated[Optional[StrictStr], Field(description="filter by end date")] = None, group_by : Annotated[Optional[conlist(StrictStr)], Field(description="group by")] = None, interval : Annotated[Optional[StrictStr], Field(description="interval")] = None, start_date : Annotated[Optional[StrictStr], Field(description="filter by start date")] = None, workflow : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get Fragment Summary  # noqa: E501

        Get Fragment Summary  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.v3_fragments_summary_retrieve_with_http_info(end_date, group_by, interval, start_date, workflow, async_req=True)
        >>> result = thread.get()

        :param end_date: filter by end date
        :type end_date: str
        :param group_by: group by
        :type group_by: List[str]
        :param interval: interval
        :type interval: str
        :param start_date: filter by start date
        :type start_date: str
        :param workflow:
        :type workflow: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(V3WorkFragment, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'end_date',
            'group_by',
            'interval',
            'start_date',
            'workflow'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v3_fragments_summary_retrieve" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('end_date') is not None:  # noqa: E501
            _query_params.append(('end_date', _params['end_date']))

        if _params.get('group_by') is not None:  # noqa: E501
            _query_params.append(('group_by', _params['group_by']))
            _collection_formats['group_by'] = 'multi'

        if _params.get('interval') is not None:  # noqa: E501
            _query_params.append(('interval', _params['interval']))

        if _params.get('start_date') is not None:  # noqa: E501
            _query_params.append(('start_date', _params['start_date']))

        if _params.get('workflow') is not None:  # noqa: E501
            _query_params.append(('workflow', _params['workflow']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['tokenAuth']  # noqa: E501

        _response_types_map = {
            '200': "V3WorkFragment",
        }

        return self.api_client.call_api(
            '/v3/fragments/summary', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
